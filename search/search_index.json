{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview The ViziVault Platform is the first all-in-one PrivSec (privacy/security) solution on the market today, providing privacy as a service for your organization's data. We aim to provide rich applications to visualize and contextualize the usage of sensitive information as it moves through your systems, and empower developers to easily control access to it. With the platform you can: Upload sensitive data and create a thorough inventory of it Encrypt your data, ensuring maximum protection in our secure vault system Enable reporting on private data within your organization or make it available to other organizations in tightly-controlled ways Our platform and suite of connectors and tools makes it easy for you to transfer sensitive data from various sources into our secure storage protected by state-of-the-art encryption using our ViziVault API . The Platform ViziVault API The ViziVault API enables you to store, retrieve, and manage personal and sensitive information in a safe and secure manner. The multi-layer cryptographic system will allow you to manage access to end users' personal information. You can control what people and applications from your organization have access to what kinds of data and what they are allowed to do with it. You can also securely transmit a end-user's personal data, in whole or in part, keeping the use of personal information tied to your company's workflows and business goals. This is meant to provide users with the greatest flexibility on the security of their data. You have the capability to maximize your usage of sensitive data you have collected without risking any unnecessary exposure. We give you the maximum flexibility and capability to meet or exceed regulatory requirements on the use of personal data. Visit the API Reference to learn more about the available endpoints. ViziVault Enterprise ViziVault Enterprise is a management platform for the personal information stored using the ViziVault API for a company\u2019s users, showing the accessibility and composition of governed data and allowing you to control associated metadata and permissions. Here, companies can take action to reduce data privacy risks and monitor potential problems in real-time. Deployment Models The ViziVault Platform aims to eliminate any risk of malicious intrusions by enforcing encryption for data in transit and in persistence. It is carefully designed to eliminate the threat of your organization's data being leaked publicly. Your data is hidden even from our organization; we do not store your decryption key and have no way of reading your sensitive information. Even despite these precautions, we completely understand that your policies might require a solution even more secure than sending data to our platform. Therefore, we offer the alternative option of hosting our lightweight API on your own infrastructure to ensure that sensitive data never leaves your network. On-Premise Our On-Premise option places our Vault API on your hardware, behind your firewall, for added security. This ensures that it is impossible for any unencrypted data to be read by an external party, including us. Our architecture is container-ready and can be deployed to fit your needs with all security best-practices baked in. By sending metadata back to our platform, you maintain rich insights and powerful control to enable your users and customers to take control of their data with full transparency. Hosted We also offer a full software-as-a-service solution that is managed by AnonTech in the cloud. This option is the most convenient if hosting our API in your infrastructure adds too much complexity or overhead. Hosting in the cloud enables your vaults to dynamically scale to meet your demand and rapidly configure platform features at the click of a button. In this way, you can be sure that you will only pay for infrastructure and features that you need. We strongly enforce internal policies built around your data security at the core, ensuring that no third parties will have access to your data. Our deployment models can fit your company's needs without sacrificing the features unlocked by using the ViziVault Platform. Global Availability With the ever-growing demand for increased data regulation, we are designed with compliance at the core and offer our services globally at the click of a button to meet the regulations of today and tomorrow. Creating new vaults for your orgnization's data has never been easier with ViziVault Enterprise . Whether you are provisioning for compliance, performance, or availability, we have the tools to meet your needs. Complete Access Control Easily grant access to trusted applications to limit the scope of who and what can query your data using ViziVault Enterprise . Try the Platform Looking to use the ViziVault Platform for your organization today? Get Started","title":"Overview"},{"location":"#overview","text":"The ViziVault Platform is the first all-in-one PrivSec (privacy/security) solution on the market today, providing privacy as a service for your organization's data. We aim to provide rich applications to visualize and contextualize the usage of sensitive information as it moves through your systems, and empower developers to easily control access to it. With the platform you can: Upload sensitive data and create a thorough inventory of it Encrypt your data, ensuring maximum protection in our secure vault system Enable reporting on private data within your organization or make it available to other organizations in tightly-controlled ways Our platform and suite of connectors and tools makes it easy for you to transfer sensitive data from various sources into our secure storage protected by state-of-the-art encryption using our ViziVault API .","title":"Overview"},{"location":"#the-platform","text":"","title":"The Platform"},{"location":"#vizivault-api","text":"The ViziVault API enables you to store, retrieve, and manage personal and sensitive information in a safe and secure manner. The multi-layer cryptographic system will allow you to manage access to end users' personal information. You can control what people and applications from your organization have access to what kinds of data and what they are allowed to do with it. You can also securely transmit a end-user's personal data, in whole or in part, keeping the use of personal information tied to your company's workflows and business goals. This is meant to provide users with the greatest flexibility on the security of their data. You have the capability to maximize your usage of sensitive data you have collected without risking any unnecessary exposure. We give you the maximum flexibility and capability to meet or exceed regulatory requirements on the use of personal data. Visit the API Reference to learn more about the available endpoints.","title":"ViziVault API"},{"location":"#vizivault-enterprise","text":"ViziVault Enterprise is a management platform for the personal information stored using the ViziVault API for a company\u2019s users, showing the accessibility and composition of governed data and allowing you to control associated metadata and permissions. Here, companies can take action to reduce data privacy risks and monitor potential problems in real-time.","title":"ViziVault Enterprise"},{"location":"#deployment-models","text":"The ViziVault Platform aims to eliminate any risk of malicious intrusions by enforcing encryption for data in transit and in persistence. It is carefully designed to eliminate the threat of your organization's data being leaked publicly. Your data is hidden even from our organization; we do not store your decryption key and have no way of reading your sensitive information. Even despite these precautions, we completely understand that your policies might require a solution even more secure than sending data to our platform. Therefore, we offer the alternative option of hosting our lightweight API on your own infrastructure to ensure that sensitive data never leaves your network.","title":"Deployment Models"},{"location":"#on-premise","text":"Our On-Premise option places our Vault API on your hardware, behind your firewall, for added security. This ensures that it is impossible for any unencrypted data to be read by an external party, including us. Our architecture is container-ready and can be deployed to fit your needs with all security best-practices baked in. By sending metadata back to our platform, you maintain rich insights and powerful control to enable your users and customers to take control of their data with full transparency.","title":"On-Premise"},{"location":"#hosted","text":"We also offer a full software-as-a-service solution that is managed by AnonTech in the cloud. This option is the most convenient if hosting our API in your infrastructure adds too much complexity or overhead. Hosting in the cloud enables your vaults to dynamically scale to meet your demand and rapidly configure platform features at the click of a button. In this way, you can be sure that you will only pay for infrastructure and features that you need. We strongly enforce internal policies built around your data security at the core, ensuring that no third parties will have access to your data. Our deployment models can fit your company's needs without sacrificing the features unlocked by using the ViziVault Platform.","title":"Hosted"},{"location":"#global-availability","text":"With the ever-growing demand for increased data regulation, we are designed with compliance at the core and offer our services globally at the click of a button to meet the regulations of today and tomorrow. Creating new vaults for your orgnization's data has never been easier with ViziVault Enterprise . Whether you are provisioning for compliance, performance, or availability, we have the tools to meet your needs.","title":"Global Availability"},{"location":"#complete-access-control","text":"Easily grant access to trusted applications to limit the scope of who and what can query your data using ViziVault Enterprise .","title":"Complete Access Control"},{"location":"#try-the-platform","text":"Looking to use the ViziVault Platform for your organization today? Get Started","title":"Try the Platform"},{"location":"getting-started/","text":"Getting Started Info Check out the Overview to learn more about how the platform can be used in your organization The ViziVault Platform is convenient and easy to set up, allowing you to begin securing your sensitive information as soon as possible. Obtaining a Vault We provide you with all the tools you need to take control of your data today. Whether you are a startup or a large-scale enterprise, we have you covered. To begin using our platform, click the button below to request your own vault. Request a Vault Terminology To familiarize yourself with the various concepts used across the system and the data formats that are used to represent them, check out our our Glossary . Glossary Integration To streamline the process of integrating our API into your software, we have created officially-supported client libraries in a variety of languages. This provides a convenient layer of abstraction around the process of authenticating and performing HTTP requests. Tools and Libraries Quickstart Our quickstart guide explains how to get started importing your own data using our SDK libraries, to start loading and securing your own end-user personal data. It describes how to use our systems to search and retrieve data while maintaining security and privacy. Quickstart Using the Platform Do you have an active vault that you are ready to start utilizing? You can find numerous tutorials and guides in our documentation to help get started with the ViziVault Platform. These tutorials are designed to help you unlock the most control and valuable insights over your organization's data. Tutorials","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Info Check out the Overview to learn more about how the platform can be used in your organization The ViziVault Platform is convenient and easy to set up, allowing you to begin securing your sensitive information as soon as possible.","title":"Getting Started"},{"location":"getting-started/#obtaining-a-vault","text":"We provide you with all the tools you need to take control of your data today. Whether you are a startup or a large-scale enterprise, we have you covered. To begin using our platform, click the button below to request your own vault. Request a Vault","title":"Obtaining a Vault"},{"location":"getting-started/#terminology","text":"To familiarize yourself with the various concepts used across the system and the data formats that are used to represent them, check out our our Glossary . Glossary","title":"Terminology"},{"location":"getting-started/#integration","text":"To streamline the process of integrating our API into your software, we have created officially-supported client libraries in a variety of languages. This provides a convenient layer of abstraction around the process of authenticating and performing HTTP requests. Tools and Libraries","title":"Integration"},{"location":"getting-started/#quickstart","text":"Our quickstart guide explains how to get started importing your own data using our SDK libraries, to start loading and securing your own end-user personal data. It describes how to use our systems to search and retrieve data while maintaining security and privacy. Quickstart","title":"Quickstart"},{"location":"getting-started/#using-the-platform","text":"Do you have an active vault that you are ready to start utilizing? You can find numerous tutorials and guides in our documentation to help get started with the ViziVault Platform. These tutorials are designed to help you unlock the most control and valuable insights over your organization's data. Tutorials","title":"Using the Platform"},{"location":"libraries/","text":"Libraries Integrate into your Vault APIs using one of our official libraries. We offer an official SDK for most languages widely used in the industry today and are actively maintained by our engineering team. Java Node.js Python C# PHP (beta) Library not available for your desired language? Feel free to contribute to our open source community ! How does the SDK work? Installation Java <!-- In your pom.xml --> <dependency> <groupId> io.anontech.vizivault </groupId> <artifactId> vizivault-java-client </artifactId> <version> 1.0.0 </version> </dependency> C# # Installing via NuGet Install-Package Anontech-VizivaultClient Node.js npm install anontech-vizivault-client Python pip install -e git://github.com/anontechnology/vault-python-sdk.git/#egg=vizivault PHP // Coming soon... Vault Setup Java String encryptionKey = System . getenv ( \"VIZIVAULT_ENCRYPTION_KEY\" ); String decryptionKey = System . getenv ( \"VIZIVAULT_DECRYPTION_KEY\" ); ViziVault vault = new ViziVault ( url ) . withApiKey ( apiKey ) . withEncryptionKey ( encryptionKey ) . withDecryptionKey ( decryptionKey ); C# string encryptionKey = System . Environment . GetEnvironmentVariable ( \"VIZIVAULT_ENCRYPTION_KEY\" ); string decryptionKey = System . Environment . GetEnvironmentVariable ( \"VIZIVAULT_DECRYPTION_KEY\" ); ViziVault vault = new ViziVault ( url ) . WithApiKey ( apiKey ) . WithEncryptionKey ( encryptionKey ) . WithDecryptionKey ( decryptionKey ); Node.js const encryptionKey = process . env . VIZIVAULT_ENCRYPTION_KEY ; const decryptionKey = process . env . VIZIVAULT_DECRYPTION_KEY ; let vault = new ViziVault () . withBaseURL ( url ) . withAPIKey ( apiKey ) . withEncryptionKey ( encryptionKey ) . withDecryptionKey ( decryptionKey ); Python vault = vizivault . ViziVault ( base_url = url , api_key = apiKey , encryption_key = os . getenv ( 'VIZIVAULT_ENCRYPTION_KEY' ), decryption_key = os . getenv ( 'VIZIVAULT_DECRYPTION_KEY' ) PHP $encryptionKey = getenv(\"VIZIVAULT_ENCRYPTION_KEY\"); $decryptionKey = getenv(\"VIZIVAULT_DECRYPTION_KEY\"); $vault = new ViziVault() ->withBaseURL($url) ->withAPIKey($apiKey) ->withEncryptionKey($encryptionKey) ->withDecryptionKey($decryptionKey) ->build(); Attributes The ViziVault ecosystem organizes your data using the concept of attributes . Every data point consists of three main components: a data subject id, which represents who the data is about; a value, which is some piece of information about the data subject; and an attribute, which expresses the relationship between the data subject and the value. For example, in an online retail application, there would be an attribute for shipping addresses, an attribute for billing addresses, an attribute for credit card information, and so on. Adding an Attribute to a Data Subject Attributes are stored as key / value pairs of strings. Some attributes are repeatable, such that multiple values can be stored for the same data subject; others are not repeatable, such that adding a new value to a data subject will overwrite any previous values. You can control whether an attribute is repeatable by modifying the associated attribute definition . Java // Adding an attribute to a newly-created data subject DataSubject dataSubject = new DataSubject ( \"exampleUser\" ); dataSubject . addAttribute ( \"FIRST_NAME\" , \"Jane\" ); vault . save ( dataSubject ); // Adding an attribute to a data subject retrieved from the vault DataSubject dataSubject = vault . findByDataSubject ( \"Client6789\" ); dataSubject . addAttribute ( \"FULL_ADDRESS\" , \"1 Hacker Way, Beverly Hills, CA 90210\" ); vault . save ( dataSubject ); // Adding an attribute with additional metadata to a data subject Attribute attribute = new Attribute ( \"LAST_NAME\" ); attribute . setTags ( List . of ( \"ExampleTag\" )); attribute . setValue ( \"Smith\" ); dataSubject . addAttribute ( attribute ); vault . save ( dataSubject ); C# // Adding an attribute to a newly-created data subject DataSubject dataSubject = new DataSubject ( \"exampleUser\" ); dataSubject . AddAttribute ( \"FIRST_NAME\" , \"Jane\" ); await vault . SaveAsync ( dataSubject ); // Adding an attribute to data subject retrieved from the vault DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); dataSubject . AddAttribute ( \"FIRST_NAME\" , \"Jane\" ); await vault . SaveAsync ( DataSubject ); // Adding an attribute with additional metadata to a data subject AttributeValue attribute = new Attribute ( \"LAST_NAME\" ) { Tags = new List < String > { \"ExampleTag\" }, Value = \"Smith\" }; dataSubject . AddAttribute ( attribute ); await vault . SaveAsync ( dataSubject ); Node.js // Adding an attribute to user vault . findByUser ( \"User1234\" ). then (( user ) => { user . setAttribute ( \"FIRST_NAME\" , \"Jane\" ); vault . save ( user ); }); // Adding an attribute to entity vault . findByEntity ( \"Client6789\" ). then (( entity ) => { entity . setAttribute ( \"FULL_ADDRESS\" , \"1 Hacker Way, Beverly Hills, CA 90210\" ); vault . save ( entity ); }); Python # Adding an attribute to user user = vault . find_by_user ( \"User1234\" ) user . add_attribute ( \"FIRST_NAME\" , \"Jane\" ) vault . save ( user ) # Adding an attribute to entity entity = vault . find_by_entity ( \"Client6789\" ) entity . add_attribute ( \"FULL_ADDRESS\" , \"1 Hacker Way, Beverly Hills, CA 90210\" ) vault . save ( entity ) PHP // Adding an attribute to user $user = $vault->findByUser(\"User1234\"); $user->setAttribute(\"FIRST_NAME\", \"Jane\"); $vault->save($user); // Adding an attribute to entity $entity = $vault->findByUser(\"Client6789\"); $entity->setAttribute(\"FULL_ADDRESS\", \"1 Hacker Way, Beverly Hills, CA 90210\"); $vault->save($entity); Retrieving all Attributes of a Data Subject Retrieves all Attributes for the specified data subject. Returns a list of Attribute objects. Java // Retrieving all attributes for a data subject DataSubject dataSubject = vault . findByDataSubject ( \"User1234\" ); List < Attribute > attributes = dataSubject . getAttributes (); C# // Retrieving all attributes for a data subject DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); List < Attribute > attributes = dataSubject . Attributes ; Node.js // Retrieving all attributes for a user vault . findByUser ( \"User1234\" ). then (( user ) => { let attributes = user . getAttributes (); }); // Retrieving all attributes for an entity vault . findByEntity ( \"Client6789\" ). then (( entity ) => { let attributes = entity . getAttributes (); }); Python # Retrieving all attributes for a user user = vault . find_by_user ( \"User1234\" ) attributes = user . get_attributes () # Retrieving all attributes for an entity entity = vault . find_by_entity ( \"Client6789\" ) attributes = entity . get_attributes () PHP // Retrieving all attributes for a user $user = $vault->findByUser(\"User1234\"); $attributes = $user->getAttributes(); // Retrieving all attributes for an entity $entity = $vault->findByEntity(\"Client6789\"); $attributes = $entity->getAttributes(); Retrieving an Attribute of a Data Subject Retrieves a single specified attribute for the specified data subject. For repeatable attributes, use getAttributes(attributeName) ; for non-repeatable attributes, use getAttribute(attributeName) . Java // Retrieving specific attribute for a data subject DataSubject dataSubject = vault . findByDataSubject ( \"User1234\" ); Attribute attribute = dataSubject . getAttribute ( \"FIRST_NAME\" ); // Retrieving multiple values for a repeatable attribute List < Attribute > attributes = dataSubject . getAttributes ( \"SHIPPING_ADDRESS\" ); C# // Retrieving specific attribute for a data subject DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); Attribute attribute = dataSubject . GetAttribute ( \"FIRST_NAME\" ); // Retrieving multiple values for a repeatable attribute List < Attribute > attributes = dataSubject . GetAttributes ( \"SHIPPING_ADDRESS\" ); Node.js // Retrieving specific attribute for a user vault . findByUser ( \"User1234\" ). then (( user ) => { let attribute = user . getAttribute ( \"FIRST_NAME\" ); }); // Retrieving specific attribute for an entity let entity = vault . findByEntity ( \"Client6789\" ). then (( entity ) => { let attribute = entity . getAttribute ( \"FULL_ADDRESS\" ); }); Python # Retrieving specific attribute for a user user = vault . find_by_user ( \"User1234\" ) attribute = user . get_attribute ( \"FIRST_NAME\" ) # Retrieving specific attribute for an entity entity = vault . find_by_entity ( \"Client6789\" ) attributes = entity . get_attribute ( \"FULL_ADDRESS\" ) PHP // Retrieving specific attribute for a user $user = $vault->findByUser(\"User1234\"); $attribute = $user->getAttribute(\"FIRST_NAME\"); // Retrieving specific attribute for an entity $entity = $vault->findByEntity(\"Client6789\"); $attributes = $entity->getAttribute(\"FULL_ADDRESS\"); Deleting Data Subject Attributes Attributes can be removed from the data subject object by calling clearAttribute with the specified attribute name, or by calling purge to remove all attributes. Additionally, all attributes have a unique datapoint id, and attributes can be deleted using this id. Java // Purging all data subject attributes vault . purge ( \"User1234\" ); // Removing all values of a specific attribute DataSubject dataSubject = vault . findByDataSubject ( \"User1234\" ); dataSubject . clearAttribute ( \"LAST_NAME\" ); vault . save ( dataSubject ); // Removing an individual value by its datapoint id vault . deleteDataPoint ( \"123e4567-e89b-12d3-a456-426614174000\" ); C# // Purging all data subject attributes await vault . PurgeAsync ( \"User1234\" ); // Removing specific attribute DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); dataSubject . ClearAttribute ( \"LAST_NAME\" ); await vault . SaveAsync ( dataSubject ); // Removing an individual value by its datapoint id await vault . DeleteDataPointAsync ( \"123e4567-e89b-12d3-a456-426614174000\" ); Node.js // Purging all user attributes vault . purge ( \"User1234\" ); // Removing specific attribute let user = vault . findByUser ( \"User1234\" ). then (( user ) => { user . remove ( \"LAST_NAME\" ); vault . save ( user ); }); Python # Purging all user attributes vault . purge ( \"User1234\" ) # Removing specific attribute user = vault . findByUser ( \"User1234\" ) user . remove ( \"LAST_NAME\" ) vault . save ( user ) # Removing an individual value by its datapoint id vault . delete_data_point ( \"123e4567-e89b-12d3-a456-426614174000\" ) PHP // Purging all user attributes $user = $vault->findByUser(\"User1234\"); $user->purge(); // Removing specific attribute $user = $vault->findByUser(\"User1234\"); $user->remove(\"LAST_NAME\"); Searching To search a vault for attributes , pass in a SearchRequest. A list of matching Attributes will be returned. For more information, read about ViziVault search . Java int pageIndex = 0 ; int maxCount = 25 ; List < Attribute > attributes = vault . search ( new SearchRequest ( \"LAST_NAME\" , \"Doe\" ), pageIndex , maxCount ); C# int pageIndex = 0 ; int maxCount = 25 ; List < Attribute > attributes = await vault . SearchAsync ( new SearchRequest ( \"LAST_NAME\" , \"Doe\" ), pageIndex , maxCount ); Node.js const count = 1 ; const page = 1 ; vault . search ( new SearchRequest ( \"LAST_NAME\" , \"Doe\" ), page , count ). then (( attributes ) => { // use attributes }); Python attributes = vault . search ( SearchRequest ( \"LAST_NAME\" , \"Doe\" ), page = 0 , count = 25 ) PHP $attributes = $vault.search(new SearchRequest(\"LAST_NAME\", \"Doe\")); Attribute Definitions Attributes are defined using an attribute definition object that contains all relevant metadata for the key . This is where attributes are given tags and regulations , along with a schema to specify the expected structure of the value of the attribute. Display names and hints can also be added to the attribute definition for ease of use and readability. Storing an Attribute Definition in the Vault To store an attribute definition, create an AttributeDefinition object and save it to the vault as shown in the following code. Java AttributeDefinition attributeDef = new AttributeDefinition (); attributeDef . setName ( \"Billing Address\" ); attributeDef . setTags ( List . of ( \"geographic_location\" , \"financial\" )); attributeDef . setHint ( \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\",\" + \"city: \\\"Menlo Park\\\", state: \\\"California\\\", \" + \"postal_code: \\\"94025-1456\\\", country: \\\"USA\\\"\" + \"}\" ); attributeDef . setSchema ( PrimitiveSchema . STRING ); // For simple, unstsructured data attributeDef . schemaFromClass ( YourModel . class ); // Alternatively, creating a schema to store objects of a class attributeDef . setRepeatable ( false ); attributeDef . setIndexed ( false ); vault . storeAttributeDefinition ( attributeDef ); C# AttributeDefinition attributeDef = new AttributeDefinition (); attributeDef . name = \"Billing Address\" ; attributeDef . tags = { \"geographic_location\" , \"financial\" }; attributeDef . hint = \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\" country: \\\"USA\\\" }\" ; attributeDef . SetSchema ( PrimitiveSchema . String ); // For simple, unstsructured data attributeDef . SchemaFromClass ( typeof ( YourModel )); // Alternatively, creating a schema to store objects of a class attributeDef . repeatable = false ; attributeDef . indexed = false ; await vault . StoreAttributeDefinitionAsync ( attribute ); Node.js let attribute = new AttributeDefinition (); attribute . setName ( \"Billing Address\" ); attribute . setTags ([ \"geographic_location\" , \"financial\" ]); attribute . setHint ( \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\" country: \\\"USA\\\" }\" ); attribute . setSchema ( JSON . stringify ({ \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" })); attribute . setRepeatable ( false ); attribute . setImmutable ( false ); attribute . setIndexed ( false ); attribute . setRegulations ([ \"GDPR\" , \"CCPA\" ]); vault . storeAttribute ( attribute ); Python attribute = AttributeDefinition ( name = \"Billing Address\" , tags = [ \"geographic_location\" , \"financial\" ], hint = \"{ line_one: \\\" 1 Hacker Way \\\" , line_two: \\\" Apt. 53 \\\" , city: \\\" Menlo Park \\\" , state: \\\" California \\\" , postal_code: \\\" 94025-1456 \\\" country: \\\" USA \\\" }\" , schema = json . dumps ({ \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" }), repeatable = false , indexed = false , regulations = [ \"GDPR\" , \"CCPA\" ] ) vault . store_attribute ( attribute ) PHP $attribute = new AttributeDefinition(); $attribute->setName(\"Billing Address\"); $attribute->setTags(array(\"geographic_location\", \"financial\")); $attribute->setHint(\"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\", country: \\\"USA\\\" }\"); $attribute->setSchema(json.encode({ \"line_one\": \"string\", \"line_two\": \"string\", \"city\": \"string\", \"state\": \"string\", \"postal_code\": \"string\", \"country\": \"string\" }); $attribute->setRepeatable(false); $attribute->setImmutable(false); $attribute->setIndexed(false); $attribute->setRegulations(array(\"GDPR\", \"CCPA\")); $vault->storeAttribute($attribute); Retrieving Attribute Definitions from the Vault To view metadata about attribute definitions, call getAttributeDefinition to view one attribute definition by name or getAttributeDefinitions to list all attribute definitions in the system. Java // Retrieving all attribute definitions List < AttributeDefinition > attributeDefs = vault . getAttributeDefinitions (); // Retrieving specific attribute definition AttributeDefinition attributeDef = vault . getAttributeDefinition ( \"Billing Address\" ); C# // Retrieving all attributes List < AttributeDefinition > attributes = await vault . GetAttributeDefinitionsAsync (); // Retrieving specific attribute AttributeDefinition attribute = await vault . GetAttributeDefinitionAsync ( \"Billing Address\" ); Node.js // Retrieving all attributes let attributes = vault . getAttributeDefinitions (); // Retrieving specific attribute let attribute = vault . getAttributeDefinition ( \"Billing Address\" ); Python # Retrieving all attributes attributes = vault . get_attribute_definitions () # Retrieving specific attribute attribute = vault . get_attribute_definition ( \"Billing Address\" ) PHP // Retrieving all attributes $attributes = $vault->getAttributeDefinitions(); // Retrieving specific attribute $attribute = $vault->getAttributeDefinition(\"Billing Address\"); Tags Tags are user-defined strings that can be applied to attributes to aid in classification and searching. Storing a Tag in the Vault To store a new tag, create a Tag object and save it to the vault. Java vault . storeTag ( new Tag ( \"Financial Data\" )); C# await vault . StoreTagAsync ( new Tag ( \"Financial Data\" )); Node.js vault . save ( new Tag ( \"Financial Data\" )); Python tag = vault . store_tag ( Tag ( \"Financial Data\" )) PHP $tag = $vault->save(new Tag(\"Financial Data\")); Retrieving Tags from the Vault Like attribute definition metadata, tag metadata can be retrieved for a single tag or for all tags in the system. Java // Retrieving all tags List < Tag > tags = vault . getTags (); // Retrieving specific tag Tag tag = vault . getTag ( \"Financial Data\" ); C# // Retrieving all tags List < Tag > tags = await vault . GetTagsAsync (); // Retrieving specific tag String tag = await vault . GetTagAsync ( \"Financial Data\" ); Node.js // Retrieving all tags vault . getTags (). then (( tags ) => { // use tags }); // Retrieving specific tag vault . getTag ( \"Financial Data\" ). then (( tag ) => { // use tag }); Python # Retrieving all tags tags = vault . get_tags () # Retrieving specific tag tag = vault . get_tag ( \"Financial Data\" ) PHP // Retrieving all tags $tags = $vault->getTags(); // Retrieving specific tag $tag = $vault->getTag(\"Financial Data\"); Deleting Tags from the Vault To delete a tag, specify the tag to be removed. A boolean denoting the status of the operation will be returned. This will remove the tag from all attributes, attribute definitions, and data subjects that are currently tagged with it. Java // Removing a specific tag boolean removed = vault . deleteTag ( \"Financial Data\" ); C# // Removing a specific tag bool removed = await vault . DeleteTagAsync ( \"Financial Data\" ); Node.js // Removing a specific tag vault . removeTag ( \"Financial Data\" ). then (( removed ) => { // removed is a boolean }); Python # Removing a specific tag removed = vault . remove_tag ( \"Financial Data\" ) PHP // Removing a specific tag $removed = $vault->removeTag(\"Financial Data\"); Regulations A regulation object represents a governmental regulation that impacts how you can use the data in your vault. Each data point can have a number of regulations associated with it, which makes it easier to ensure your use of the data is compliant. You can tag data points with regulations when entering them into the system, or specify rules that the system will use to automatically tag regulations for you. Storing a Regulation in the Vault To store a regulation to the vault, create a Regulation object, set its key and its display name along with a URL pointing to further information about it, and call storeRegulation . To automatically apply regulations to incoming data, rules can be specified. Java // Storing a regulation Regulation regulation = new Regulation (); regulation . setKey ( \"GDPR\" ); regulation . setName ( \"General Data Protection Regulation\" ); regulation . setUrl ( \"https://gdpr.eu/\" ); regulation . setRule ( new UserRule ( \"GEOGRAPHIC_REGION\" , UserRule . UserValuePredicate . EQUALS , \"EU\" )); vault . storeRegulation ( regulation ); C# // Storing a regulation Regulation regulation = new Regulation (); regulation . Key = \"GDPR\" ; regulation . Name = \"General Data Protection Regulation\" ; regulation . Url = \"https://gdpr.eu/\" ; regulation . Rule = new UserRule ( \"GEOGRAPHIC_REGION\" , UserRule . UserValuePredicate . Eq , \"EU\" ); await vault . StoreRegulationAsync ( regulation ); Node.js // Storing a regulation let regulation = new Regulation (); regulation . setKey ( \"GDPR\" ); regulation . setName ( \"General Data Protection Regulation\" ); regulation . setUrl ( \"https://gdpr.eu/\" ); regulation . setRule ( new UserRule ( \"GEOGRAPHIC_REGION\" , UserRule . UserValuePredicate . EQUALS , \"EU\" )); vault . save ( regulation ); Python # Storing a regulation regulation = Regulation ( key = \"GDPR\" , name = \"General Data Protection Regulation\" , url = \"https://gdpr.eu/\" ) savedRegulation = vault . store_regulation ( regulation ) PHP // Storing a regulation $regulation = new Regulation(\"GDPR\", \"General Data Protection Regulation\", \"https://gdpr.eu/\" ); $savedRegulation = $vault->save($regulation); Retrieving Regulations from the Vault Regulations can be retrieved as a list of Regulation objects or by requesting a single regulation by its key. Java // Retrieving all regulations List < Regulation > regulations = vault . getRegulations (); // Retrieving specific regulation Regulation regulation = vault . getRegulation ( \"GDPR\" ); C# /// Retrieving all regulations List < Regulation > regulations = await vault . GetRegulationsAsync (); // Retrieving specific regulation Regulation regulation = await vault . GetRegulationAsync ( \"GDPR\" ); Node.js // Retrieving all regulations vault . getRegulations (). then (( regulations ) { // use regulations }); // Retrieving specific regulation vault . getRegulation ( \"GDPR\" ). then (( regulation ) => { // use regulation }); Python # Retrieving all regulations regulations = vault . get_regulations # Retrieving specific regulation regulation = vault . get_regulation ( \"GDPR\" ) PHP // Retrieving all regulations $regulations = $vault->getRegulations(); // Retrieving specific regulation $regulation = $vault->getRegulation(\"GDPR\"); Deleting Regulations from the Vault To remove a regulation , specify the key of the regulation to be removed. A boolean denoting the status of the operation will be returned. Java // Removing a specific regulation boolean removed = vault . deleteRegulation ( \"GDPR\" ); C# // Removing a specific regulation bool removed = await vault . DeleteRegulationAsync ( \"GDPR\" ); Node.js // Removing a specific regulation vault . removeRegulation ( \"GDPR\" ). then (( removed ) => { // removed is a boolean }); Python # Removing a specific regulation removed = vault . delete_regulation ( \"GDPR\" ) PHP // Removing a specific regulation $removed = $vault->removeRegulation(\"GDPR\");","title":"Libraries"},{"location":"libraries/#libraries","text":"Integrate into your Vault APIs using one of our official libraries. We offer an official SDK for most languages widely used in the industry today and are actively maintained by our engineering team. Java Node.js Python C# PHP (beta) Library not available for your desired language? Feel free to contribute to our open source community !","title":"Libraries"},{"location":"libraries/#how-does-the-sdk-work","text":"","title":"How does the SDK work?"},{"location":"libraries/#installation","text":"Java <!-- In your pom.xml --> <dependency> <groupId> io.anontech.vizivault </groupId> <artifactId> vizivault-java-client </artifactId> <version> 1.0.0 </version> </dependency> C# # Installing via NuGet Install-Package Anontech-VizivaultClient Node.js npm install anontech-vizivault-client Python pip install -e git://github.com/anontechnology/vault-python-sdk.git/#egg=vizivault PHP // Coming soon...","title":"Installation"},{"location":"libraries/#vault-setup","text":"Java String encryptionKey = System . getenv ( \"VIZIVAULT_ENCRYPTION_KEY\" ); String decryptionKey = System . getenv ( \"VIZIVAULT_DECRYPTION_KEY\" ); ViziVault vault = new ViziVault ( url ) . withApiKey ( apiKey ) . withEncryptionKey ( encryptionKey ) . withDecryptionKey ( decryptionKey ); C# string encryptionKey = System . Environment . GetEnvironmentVariable ( \"VIZIVAULT_ENCRYPTION_KEY\" ); string decryptionKey = System . Environment . GetEnvironmentVariable ( \"VIZIVAULT_DECRYPTION_KEY\" ); ViziVault vault = new ViziVault ( url ) . WithApiKey ( apiKey ) . WithEncryptionKey ( encryptionKey ) . WithDecryptionKey ( decryptionKey ); Node.js const encryptionKey = process . env . VIZIVAULT_ENCRYPTION_KEY ; const decryptionKey = process . env . VIZIVAULT_DECRYPTION_KEY ; let vault = new ViziVault () . withBaseURL ( url ) . withAPIKey ( apiKey ) . withEncryptionKey ( encryptionKey ) . withDecryptionKey ( decryptionKey ); Python vault = vizivault . ViziVault ( base_url = url , api_key = apiKey , encryption_key = os . getenv ( 'VIZIVAULT_ENCRYPTION_KEY' ), decryption_key = os . getenv ( 'VIZIVAULT_DECRYPTION_KEY' ) PHP $encryptionKey = getenv(\"VIZIVAULT_ENCRYPTION_KEY\"); $decryptionKey = getenv(\"VIZIVAULT_DECRYPTION_KEY\"); $vault = new ViziVault() ->withBaseURL($url) ->withAPIKey($apiKey) ->withEncryptionKey($encryptionKey) ->withDecryptionKey($decryptionKey) ->build();","title":"Vault Setup"},{"location":"libraries/#attributes","text":"The ViziVault ecosystem organizes your data using the concept of attributes . Every data point consists of three main components: a data subject id, which represents who the data is about; a value, which is some piece of information about the data subject; and an attribute, which expresses the relationship between the data subject and the value. For example, in an online retail application, there would be an attribute for shipping addresses, an attribute for billing addresses, an attribute for credit card information, and so on.","title":"Attributes"},{"location":"libraries/#adding-an-attribute-to-a-data-subject","text":"Attributes are stored as key / value pairs of strings. Some attributes are repeatable, such that multiple values can be stored for the same data subject; others are not repeatable, such that adding a new value to a data subject will overwrite any previous values. You can control whether an attribute is repeatable by modifying the associated attribute definition . Java // Adding an attribute to a newly-created data subject DataSubject dataSubject = new DataSubject ( \"exampleUser\" ); dataSubject . addAttribute ( \"FIRST_NAME\" , \"Jane\" ); vault . save ( dataSubject ); // Adding an attribute to a data subject retrieved from the vault DataSubject dataSubject = vault . findByDataSubject ( \"Client6789\" ); dataSubject . addAttribute ( \"FULL_ADDRESS\" , \"1 Hacker Way, Beverly Hills, CA 90210\" ); vault . save ( dataSubject ); // Adding an attribute with additional metadata to a data subject Attribute attribute = new Attribute ( \"LAST_NAME\" ); attribute . setTags ( List . of ( \"ExampleTag\" )); attribute . setValue ( \"Smith\" ); dataSubject . addAttribute ( attribute ); vault . save ( dataSubject ); C# // Adding an attribute to a newly-created data subject DataSubject dataSubject = new DataSubject ( \"exampleUser\" ); dataSubject . AddAttribute ( \"FIRST_NAME\" , \"Jane\" ); await vault . SaveAsync ( dataSubject ); // Adding an attribute to data subject retrieved from the vault DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); dataSubject . AddAttribute ( \"FIRST_NAME\" , \"Jane\" ); await vault . SaveAsync ( DataSubject ); // Adding an attribute with additional metadata to a data subject AttributeValue attribute = new Attribute ( \"LAST_NAME\" ) { Tags = new List < String > { \"ExampleTag\" }, Value = \"Smith\" }; dataSubject . AddAttribute ( attribute ); await vault . SaveAsync ( dataSubject ); Node.js // Adding an attribute to user vault . findByUser ( \"User1234\" ). then (( user ) => { user . setAttribute ( \"FIRST_NAME\" , \"Jane\" ); vault . save ( user ); }); // Adding an attribute to entity vault . findByEntity ( \"Client6789\" ). then (( entity ) => { entity . setAttribute ( \"FULL_ADDRESS\" , \"1 Hacker Way, Beverly Hills, CA 90210\" ); vault . save ( entity ); }); Python # Adding an attribute to user user = vault . find_by_user ( \"User1234\" ) user . add_attribute ( \"FIRST_NAME\" , \"Jane\" ) vault . save ( user ) # Adding an attribute to entity entity = vault . find_by_entity ( \"Client6789\" ) entity . add_attribute ( \"FULL_ADDRESS\" , \"1 Hacker Way, Beverly Hills, CA 90210\" ) vault . save ( entity ) PHP // Adding an attribute to user $user = $vault->findByUser(\"User1234\"); $user->setAttribute(\"FIRST_NAME\", \"Jane\"); $vault->save($user); // Adding an attribute to entity $entity = $vault->findByUser(\"Client6789\"); $entity->setAttribute(\"FULL_ADDRESS\", \"1 Hacker Way, Beverly Hills, CA 90210\"); $vault->save($entity);","title":"Adding an Attribute to a Data Subject"},{"location":"libraries/#retrieving-all-attributes-of-a-data-subject","text":"Retrieves all Attributes for the specified data subject. Returns a list of Attribute objects. Java // Retrieving all attributes for a data subject DataSubject dataSubject = vault . findByDataSubject ( \"User1234\" ); List < Attribute > attributes = dataSubject . getAttributes (); C# // Retrieving all attributes for a data subject DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); List < Attribute > attributes = dataSubject . Attributes ; Node.js // Retrieving all attributes for a user vault . findByUser ( \"User1234\" ). then (( user ) => { let attributes = user . getAttributes (); }); // Retrieving all attributes for an entity vault . findByEntity ( \"Client6789\" ). then (( entity ) => { let attributes = entity . getAttributes (); }); Python # Retrieving all attributes for a user user = vault . find_by_user ( \"User1234\" ) attributes = user . get_attributes () # Retrieving all attributes for an entity entity = vault . find_by_entity ( \"Client6789\" ) attributes = entity . get_attributes () PHP // Retrieving all attributes for a user $user = $vault->findByUser(\"User1234\"); $attributes = $user->getAttributes(); // Retrieving all attributes for an entity $entity = $vault->findByEntity(\"Client6789\"); $attributes = $entity->getAttributes();","title":"Retrieving all Attributes of a Data Subject"},{"location":"libraries/#retrieving-an-attribute-of-a-data-subject","text":"Retrieves a single specified attribute for the specified data subject. For repeatable attributes, use getAttributes(attributeName) ; for non-repeatable attributes, use getAttribute(attributeName) . Java // Retrieving specific attribute for a data subject DataSubject dataSubject = vault . findByDataSubject ( \"User1234\" ); Attribute attribute = dataSubject . getAttribute ( \"FIRST_NAME\" ); // Retrieving multiple values for a repeatable attribute List < Attribute > attributes = dataSubject . getAttributes ( \"SHIPPING_ADDRESS\" ); C# // Retrieving specific attribute for a data subject DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); Attribute attribute = dataSubject . GetAttribute ( \"FIRST_NAME\" ); // Retrieving multiple values for a repeatable attribute List < Attribute > attributes = dataSubject . GetAttributes ( \"SHIPPING_ADDRESS\" ); Node.js // Retrieving specific attribute for a user vault . findByUser ( \"User1234\" ). then (( user ) => { let attribute = user . getAttribute ( \"FIRST_NAME\" ); }); // Retrieving specific attribute for an entity let entity = vault . findByEntity ( \"Client6789\" ). then (( entity ) => { let attribute = entity . getAttribute ( \"FULL_ADDRESS\" ); }); Python # Retrieving specific attribute for a user user = vault . find_by_user ( \"User1234\" ) attribute = user . get_attribute ( \"FIRST_NAME\" ) # Retrieving specific attribute for an entity entity = vault . find_by_entity ( \"Client6789\" ) attributes = entity . get_attribute ( \"FULL_ADDRESS\" ) PHP // Retrieving specific attribute for a user $user = $vault->findByUser(\"User1234\"); $attribute = $user->getAttribute(\"FIRST_NAME\"); // Retrieving specific attribute for an entity $entity = $vault->findByEntity(\"Client6789\"); $attributes = $entity->getAttribute(\"FULL_ADDRESS\");","title":"Retrieving an Attribute of a Data Subject"},{"location":"libraries/#deleting-data-subject-attributes","text":"Attributes can be removed from the data subject object by calling clearAttribute with the specified attribute name, or by calling purge to remove all attributes. Additionally, all attributes have a unique datapoint id, and attributes can be deleted using this id. Java // Purging all data subject attributes vault . purge ( \"User1234\" ); // Removing all values of a specific attribute DataSubject dataSubject = vault . findByDataSubject ( \"User1234\" ); dataSubject . clearAttribute ( \"LAST_NAME\" ); vault . save ( dataSubject ); // Removing an individual value by its datapoint id vault . deleteDataPoint ( \"123e4567-e89b-12d3-a456-426614174000\" ); C# // Purging all data subject attributes await vault . PurgeAsync ( \"User1234\" ); // Removing specific attribute DataSubject dataSubject = await vault . FindByDataSubjectAsync ( \"User1234\" ); dataSubject . ClearAttribute ( \"LAST_NAME\" ); await vault . SaveAsync ( dataSubject ); // Removing an individual value by its datapoint id await vault . DeleteDataPointAsync ( \"123e4567-e89b-12d3-a456-426614174000\" ); Node.js // Purging all user attributes vault . purge ( \"User1234\" ); // Removing specific attribute let user = vault . findByUser ( \"User1234\" ). then (( user ) => { user . remove ( \"LAST_NAME\" ); vault . save ( user ); }); Python # Purging all user attributes vault . purge ( \"User1234\" ) # Removing specific attribute user = vault . findByUser ( \"User1234\" ) user . remove ( \"LAST_NAME\" ) vault . save ( user ) # Removing an individual value by its datapoint id vault . delete_data_point ( \"123e4567-e89b-12d3-a456-426614174000\" ) PHP // Purging all user attributes $user = $vault->findByUser(\"User1234\"); $user->purge(); // Removing specific attribute $user = $vault->findByUser(\"User1234\"); $user->remove(\"LAST_NAME\");","title":"Deleting Data Subject Attributes"},{"location":"libraries/#searching","text":"To search a vault for attributes , pass in a SearchRequest. A list of matching Attributes will be returned. For more information, read about ViziVault search . Java int pageIndex = 0 ; int maxCount = 25 ; List < Attribute > attributes = vault . search ( new SearchRequest ( \"LAST_NAME\" , \"Doe\" ), pageIndex , maxCount ); C# int pageIndex = 0 ; int maxCount = 25 ; List < Attribute > attributes = await vault . SearchAsync ( new SearchRequest ( \"LAST_NAME\" , \"Doe\" ), pageIndex , maxCount ); Node.js const count = 1 ; const page = 1 ; vault . search ( new SearchRequest ( \"LAST_NAME\" , \"Doe\" ), page , count ). then (( attributes ) => { // use attributes }); Python attributes = vault . search ( SearchRequest ( \"LAST_NAME\" , \"Doe\" ), page = 0 , count = 25 ) PHP $attributes = $vault.search(new SearchRequest(\"LAST_NAME\", \"Doe\"));","title":"Searching"},{"location":"libraries/#attribute-definitions","text":"Attributes are defined using an attribute definition object that contains all relevant metadata for the key . This is where attributes are given tags and regulations , along with a schema to specify the expected structure of the value of the attribute. Display names and hints can also be added to the attribute definition for ease of use and readability.","title":"Attribute Definitions"},{"location":"libraries/#storing-an-attribute-definition-in-the-vault","text":"To store an attribute definition, create an AttributeDefinition object and save it to the vault as shown in the following code. Java AttributeDefinition attributeDef = new AttributeDefinition (); attributeDef . setName ( \"Billing Address\" ); attributeDef . setTags ( List . of ( \"geographic_location\" , \"financial\" )); attributeDef . setHint ( \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\",\" + \"city: \\\"Menlo Park\\\", state: \\\"California\\\", \" + \"postal_code: \\\"94025-1456\\\", country: \\\"USA\\\"\" + \"}\" ); attributeDef . setSchema ( PrimitiveSchema . STRING ); // For simple, unstsructured data attributeDef . schemaFromClass ( YourModel . class ); // Alternatively, creating a schema to store objects of a class attributeDef . setRepeatable ( false ); attributeDef . setIndexed ( false ); vault . storeAttributeDefinition ( attributeDef ); C# AttributeDefinition attributeDef = new AttributeDefinition (); attributeDef . name = \"Billing Address\" ; attributeDef . tags = { \"geographic_location\" , \"financial\" }; attributeDef . hint = \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\" country: \\\"USA\\\" }\" ; attributeDef . SetSchema ( PrimitiveSchema . String ); // For simple, unstsructured data attributeDef . SchemaFromClass ( typeof ( YourModel )); // Alternatively, creating a schema to store objects of a class attributeDef . repeatable = false ; attributeDef . indexed = false ; await vault . StoreAttributeDefinitionAsync ( attribute ); Node.js let attribute = new AttributeDefinition (); attribute . setName ( \"Billing Address\" ); attribute . setTags ([ \"geographic_location\" , \"financial\" ]); attribute . setHint ( \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\" country: \\\"USA\\\" }\" ); attribute . setSchema ( JSON . stringify ({ \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" })); attribute . setRepeatable ( false ); attribute . setImmutable ( false ); attribute . setIndexed ( false ); attribute . setRegulations ([ \"GDPR\" , \"CCPA\" ]); vault . storeAttribute ( attribute ); Python attribute = AttributeDefinition ( name = \"Billing Address\" , tags = [ \"geographic_location\" , \"financial\" ], hint = \"{ line_one: \\\" 1 Hacker Way \\\" , line_two: \\\" Apt. 53 \\\" , city: \\\" Menlo Park \\\" , state: \\\" California \\\" , postal_code: \\\" 94025-1456 \\\" country: \\\" USA \\\" }\" , schema = json . dumps ({ \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" }), repeatable = false , indexed = false , regulations = [ \"GDPR\" , \"CCPA\" ] ) vault . store_attribute ( attribute ) PHP $attribute = new AttributeDefinition(); $attribute->setName(\"Billing Address\"); $attribute->setTags(array(\"geographic_location\", \"financial\")); $attribute->setHint(\"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\", country: \\\"USA\\\" }\"); $attribute->setSchema(json.encode({ \"line_one\": \"string\", \"line_two\": \"string\", \"city\": \"string\", \"state\": \"string\", \"postal_code\": \"string\", \"country\": \"string\" }); $attribute->setRepeatable(false); $attribute->setImmutable(false); $attribute->setIndexed(false); $attribute->setRegulations(array(\"GDPR\", \"CCPA\")); $vault->storeAttribute($attribute);","title":"Storing an Attribute Definition in the Vault"},{"location":"libraries/#retrieving-attribute-definitions-from-the-vault","text":"To view metadata about attribute definitions, call getAttributeDefinition to view one attribute definition by name or getAttributeDefinitions to list all attribute definitions in the system. Java // Retrieving all attribute definitions List < AttributeDefinition > attributeDefs = vault . getAttributeDefinitions (); // Retrieving specific attribute definition AttributeDefinition attributeDef = vault . getAttributeDefinition ( \"Billing Address\" ); C# // Retrieving all attributes List < AttributeDefinition > attributes = await vault . GetAttributeDefinitionsAsync (); // Retrieving specific attribute AttributeDefinition attribute = await vault . GetAttributeDefinitionAsync ( \"Billing Address\" ); Node.js // Retrieving all attributes let attributes = vault . getAttributeDefinitions (); // Retrieving specific attribute let attribute = vault . getAttributeDefinition ( \"Billing Address\" ); Python # Retrieving all attributes attributes = vault . get_attribute_definitions () # Retrieving specific attribute attribute = vault . get_attribute_definition ( \"Billing Address\" ) PHP // Retrieving all attributes $attributes = $vault->getAttributeDefinitions(); // Retrieving specific attribute $attribute = $vault->getAttributeDefinition(\"Billing Address\");","title":"Retrieving Attribute Definitions from the Vault"},{"location":"libraries/#tags","text":"Tags are user-defined strings that can be applied to attributes to aid in classification and searching.","title":"Tags"},{"location":"libraries/#storing-a-tag-in-the-vault","text":"To store a new tag, create a Tag object and save it to the vault. Java vault . storeTag ( new Tag ( \"Financial Data\" )); C# await vault . StoreTagAsync ( new Tag ( \"Financial Data\" )); Node.js vault . save ( new Tag ( \"Financial Data\" )); Python tag = vault . store_tag ( Tag ( \"Financial Data\" )) PHP $tag = $vault->save(new Tag(\"Financial Data\"));","title":"Storing a Tag in the Vault"},{"location":"libraries/#retrieving-tags-from-the-vault","text":"Like attribute definition metadata, tag metadata can be retrieved for a single tag or for all tags in the system. Java // Retrieving all tags List < Tag > tags = vault . getTags (); // Retrieving specific tag Tag tag = vault . getTag ( \"Financial Data\" ); C# // Retrieving all tags List < Tag > tags = await vault . GetTagsAsync (); // Retrieving specific tag String tag = await vault . GetTagAsync ( \"Financial Data\" ); Node.js // Retrieving all tags vault . getTags (). then (( tags ) => { // use tags }); // Retrieving specific tag vault . getTag ( \"Financial Data\" ). then (( tag ) => { // use tag }); Python # Retrieving all tags tags = vault . get_tags () # Retrieving specific tag tag = vault . get_tag ( \"Financial Data\" ) PHP // Retrieving all tags $tags = $vault->getTags(); // Retrieving specific tag $tag = $vault->getTag(\"Financial Data\");","title":"Retrieving Tags from the Vault"},{"location":"libraries/#deleting-tags-from-the-vault","text":"To delete a tag, specify the tag to be removed. A boolean denoting the status of the operation will be returned. This will remove the tag from all attributes, attribute definitions, and data subjects that are currently tagged with it. Java // Removing a specific tag boolean removed = vault . deleteTag ( \"Financial Data\" ); C# // Removing a specific tag bool removed = await vault . DeleteTagAsync ( \"Financial Data\" ); Node.js // Removing a specific tag vault . removeTag ( \"Financial Data\" ). then (( removed ) => { // removed is a boolean }); Python # Removing a specific tag removed = vault . remove_tag ( \"Financial Data\" ) PHP // Removing a specific tag $removed = $vault->removeTag(\"Financial Data\");","title":"Deleting Tags from the Vault"},{"location":"libraries/#regulations","text":"A regulation object represents a governmental regulation that impacts how you can use the data in your vault. Each data point can have a number of regulations associated with it, which makes it easier to ensure your use of the data is compliant. You can tag data points with regulations when entering them into the system, or specify rules that the system will use to automatically tag regulations for you.","title":"Regulations"},{"location":"libraries/#storing-a-regulation-in-the-vault","text":"To store a regulation to the vault, create a Regulation object, set its key and its display name along with a URL pointing to further information about it, and call storeRegulation . To automatically apply regulations to incoming data, rules can be specified. Java // Storing a regulation Regulation regulation = new Regulation (); regulation . setKey ( \"GDPR\" ); regulation . setName ( \"General Data Protection Regulation\" ); regulation . setUrl ( \"https://gdpr.eu/\" ); regulation . setRule ( new UserRule ( \"GEOGRAPHIC_REGION\" , UserRule . UserValuePredicate . EQUALS , \"EU\" )); vault . storeRegulation ( regulation ); C# // Storing a regulation Regulation regulation = new Regulation (); regulation . Key = \"GDPR\" ; regulation . Name = \"General Data Protection Regulation\" ; regulation . Url = \"https://gdpr.eu/\" ; regulation . Rule = new UserRule ( \"GEOGRAPHIC_REGION\" , UserRule . UserValuePredicate . Eq , \"EU\" ); await vault . StoreRegulationAsync ( regulation ); Node.js // Storing a regulation let regulation = new Regulation (); regulation . setKey ( \"GDPR\" ); regulation . setName ( \"General Data Protection Regulation\" ); regulation . setUrl ( \"https://gdpr.eu/\" ); regulation . setRule ( new UserRule ( \"GEOGRAPHIC_REGION\" , UserRule . UserValuePredicate . EQUALS , \"EU\" )); vault . save ( regulation ); Python # Storing a regulation regulation = Regulation ( key = \"GDPR\" , name = \"General Data Protection Regulation\" , url = \"https://gdpr.eu/\" ) savedRegulation = vault . store_regulation ( regulation ) PHP // Storing a regulation $regulation = new Regulation(\"GDPR\", \"General Data Protection Regulation\", \"https://gdpr.eu/\" ); $savedRegulation = $vault->save($regulation);","title":"Storing a Regulation in the Vault"},{"location":"libraries/#retrieving-regulations-from-the-vault","text":"Regulations can be retrieved as a list of Regulation objects or by requesting a single regulation by its key. Java // Retrieving all regulations List < Regulation > regulations = vault . getRegulations (); // Retrieving specific regulation Regulation regulation = vault . getRegulation ( \"GDPR\" ); C# /// Retrieving all regulations List < Regulation > regulations = await vault . GetRegulationsAsync (); // Retrieving specific regulation Regulation regulation = await vault . GetRegulationAsync ( \"GDPR\" ); Node.js // Retrieving all regulations vault . getRegulations (). then (( regulations ) { // use regulations }); // Retrieving specific regulation vault . getRegulation ( \"GDPR\" ). then (( regulation ) => { // use regulation }); Python # Retrieving all regulations regulations = vault . get_regulations # Retrieving specific regulation regulation = vault . get_regulation ( \"GDPR\" ) PHP // Retrieving all regulations $regulations = $vault->getRegulations(); // Retrieving specific regulation $regulation = $vault->getRegulation(\"GDPR\");","title":"Retrieving Regulations from the Vault"},{"location":"libraries/#deleting-regulations-from-the-vault","text":"To remove a regulation , specify the key of the regulation to be removed. A boolean denoting the status of the operation will be returned. Java // Removing a specific regulation boolean removed = vault . deleteRegulation ( \"GDPR\" ); C# // Removing a specific regulation bool removed = await vault . DeleteRegulationAsync ( \"GDPR\" ); Node.js // Removing a specific regulation vault . removeRegulation ( \"GDPR\" ). then (( removed ) => { // removed is a boolean }); Python # Removing a specific regulation removed = vault . delete_regulation ( \"GDPR\" ) PHP // Removing a specific regulation $removed = $vault->removeRegulation(\"GDPR\");","title":"Deleting Regulations from the Vault"},{"location":"api/attributes/","text":"Attribute Definitions POST /attributes Creates or edits an attribute definition. If there is an existing attribute in the system with the key of the provided attribute, that attribute will be updated; otherwise, a new attribute will be created. Parameters Body Parameters (Required) Name Type Description payload AttributeDefinition Description of new attribute Example payload { \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"age\" , \"financial\" , \"geographic\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"repeatable\" : true , \"schema\" : \"string\" } Example response On success, returns 201 Created and a description of the updated attribute. { \"data\" : { \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"age\" , \"financial\" , \"geographic\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"repeatable\" : true , \"schema\" : \"string\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , } } Error responses Status code Error message Description 400 Attribute must contain at least one of key or name Returned if an attribute definition is received that contains neither a key nor a name. 400 Attribute key must contain only alphanumeric characters and underscores Returned if the provided attribute key contains disallowed characters. 400 Schema cannot be null Returned if no schema was provided. 400 Sub-attribute key contains unusable characters Returned if a sub-attribute key contained in the attribute's schema contains disallowed characters. 400 Schema has unexpected class Returned if the schema of this attribute, or one of its sub-attributes, is netiher a JSON object nor a string (i.e. a number, a boolean value, a list, or null ) 400 No such regulation Returned if the provided list of regulations contains one or more regulations that do not exist in the system 400 No such entity type Returned if the provided list of applicable entity types contains one or more types that do not exist in the system 402 Your current subscription is limited to (number) custom attributes Your current license has a hard limit on the number of attribute definitions created, and you have reached the limit 403 Forbidden access to edit attribute definitions Your application does not have permission to edit attribute definitions. 409 Cannot change existing attribute from repeatable to non-repeatable, as it would invalidate existing data Returned when edits to a repeatable attribute definition would make it become non-repeatable, if there are data subjects that have multiple values for this attribute 409 Cannot edit attribute schema, as it may invalidate existing data Returned when attempting to specify a new schema for an attribute definition that is in use (editing the schema for an attribute definition that no data uses is allowed) 409 Cannot remove entity types from attribute, as it would invalidate existing data Returned when attempting to remove entity types from an attribute definition when there are attributes belonging to that definition for entities that are of one or more of the types being removed GET /attributes Retrieves data for all attribute definitions in the system. Returns a list of AttributeDefinition objects. Parameters None Example response { \"data\" : [ { \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"financial\" , \"medical\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : true , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , \"schema\" : \"string\" , \"repeatable\" : false , \"regulations\" : [ \"GDPR\" , \"HIPAA\" ] } ] } GET /attributes/{attributeKey} Displays information about one attribute definition. Returns an AttributeDefinition object. Path Parameters Name Type Description attributeKey String Key of the attribute definition to describe Example response { \"data\" : { \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"age\" , \"financial\" , \"geographic\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"repeatable\" : true , \"schema\" : \"string\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , } } Error responses Status code Error message Description 404 No such attribute The system does not contain an attribute with the specified key. DELETE /attributes/{attributeKey} Deletes an attribute definition if it is not being used. Path Parameters Name Type Description attributeKey String Key of the attribute definition to delete Example response { \"data\" : \"Successfully Deleted Attribute\" } Error responses Status code Error message Description 403 Forbidden access to delete attribute definitions Your application does not have permission to delete attribute definitions. 409 Cannot delete attribute, because it is in use There is existing data in the system that uses this attribute definition, and as such the attribute definition cannot be deleted. 409 Cannot delete attribute, because it is referenced by rule There is a rule that references this attribute definition, and as such the attribute definition cannot be deleted. 404 Attribute not found The system does not contain an attribute with the specified key.","title":"Attribute Definitions"},{"location":"api/attributes/#attribute-definitions","text":"","title":"Attribute Definitions"},{"location":"api/attributes/#post-attributes","text":"Creates or edits an attribute definition. If there is an existing attribute in the system with the key of the provided attribute, that attribute will be updated; otherwise, a new attribute will be created.","title":"POST /attributes"},{"location":"api/attributes/#parameters","text":"","title":"Parameters"},{"location":"api/attributes/#body-parameters-required","text":"Name Type Description payload AttributeDefinition Description of new attribute","title":"Body Parameters (Required)"},{"location":"api/attributes/#example-payload","text":"{ \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"age\" , \"financial\" , \"geographic\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"repeatable\" : true , \"schema\" : \"string\" }","title":"Example payload"},{"location":"api/attributes/#example-response","text":"On success, returns 201 Created and a description of the updated attribute. { \"data\" : { \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"age\" , \"financial\" , \"geographic\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"repeatable\" : true , \"schema\" : \"string\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , } }","title":"Example response"},{"location":"api/attributes/#error-responses","text":"Status code Error message Description 400 Attribute must contain at least one of key or name Returned if an attribute definition is received that contains neither a key nor a name. 400 Attribute key must contain only alphanumeric characters and underscores Returned if the provided attribute key contains disallowed characters. 400 Schema cannot be null Returned if no schema was provided. 400 Sub-attribute key contains unusable characters Returned if a sub-attribute key contained in the attribute's schema contains disallowed characters. 400 Schema has unexpected class Returned if the schema of this attribute, or one of its sub-attributes, is netiher a JSON object nor a string (i.e. a number, a boolean value, a list, or null ) 400 No such regulation Returned if the provided list of regulations contains one or more regulations that do not exist in the system 400 No such entity type Returned if the provided list of applicable entity types contains one or more types that do not exist in the system 402 Your current subscription is limited to (number) custom attributes Your current license has a hard limit on the number of attribute definitions created, and you have reached the limit 403 Forbidden access to edit attribute definitions Your application does not have permission to edit attribute definitions. 409 Cannot change existing attribute from repeatable to non-repeatable, as it would invalidate existing data Returned when edits to a repeatable attribute definition would make it become non-repeatable, if there are data subjects that have multiple values for this attribute 409 Cannot edit attribute schema, as it may invalidate existing data Returned when attempting to specify a new schema for an attribute definition that is in use (editing the schema for an attribute definition that no data uses is allowed) 409 Cannot remove entity types from attribute, as it would invalidate existing data Returned when attempting to remove entity types from an attribute definition when there are attributes belonging to that definition for entities that are of one or more of the types being removed","title":"Error responses"},{"location":"api/attributes/#get-attributes","text":"Retrieves data for all attribute definitions in the system. Returns a list of AttributeDefinition objects.","title":"GET /attributes"},{"location":"api/attributes/#parameters_1","text":"None","title":"Parameters"},{"location":"api/attributes/#example-response_1","text":"{ \"data\" : [ { \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"financial\" , \"medical\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : true , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , \"schema\" : \"string\" , \"repeatable\" : false , \"regulations\" : [ \"GDPR\" , \"HIPAA\" ] } ] }","title":"Example response"},{"location":"api/attributes/#get-attributesattributekey","text":"Displays information about one attribute definition. Returns an AttributeDefinition object.","title":"GET /attributes/{attributeKey}"},{"location":"api/attributes/#path-parameters","text":"Name Type Description attributeKey String Key of the attribute definition to describe","title":"Path Parameters"},{"location":"api/attributes/#example-response_2","text":"{ \"data\" : { \"key\" : \"SAMPLE_ATTRIBUTE\" , \"name\" : \"Sample Attribute\" , \"entityTypes\" : [ \"datasubject\" ], \"tags\" : [ \"age\" , \"financial\" , \"geographic\" ], \"hint\" : \"example data for this attribute\" , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"repeatable\" : true , \"schema\" : \"string\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , } }","title":"Example response"},{"location":"api/attributes/#error-responses_1","text":"Status code Error message Description 404 No such attribute The system does not contain an attribute with the specified key.","title":"Error responses"},{"location":"api/attributes/#delete-attributesattributekey","text":"Deletes an attribute definition if it is not being used.","title":"DELETE /attributes/{attributeKey}"},{"location":"api/attributes/#path-parameters_1","text":"Name Type Description attributeKey String Key of the attribute definition to delete","title":"Path Parameters"},{"location":"api/attributes/#example-response_3","text":"{ \"data\" : \"Successfully Deleted Attribute\" }","title":"Example response"},{"location":"api/attributes/#error-responses_2","text":"Status code Error message Description 403 Forbidden access to delete attribute definitions Your application does not have permission to delete attribute definitions. 409 Cannot delete attribute, because it is in use There is existing data in the system that uses this attribute definition, and as such the attribute definition cannot be deleted. 409 Cannot delete attribute, because it is referenced by rule There is a rule that references this attribute definition, and as such the attribute definition cannot be deleted. 404 Attribute not found The system does not contain an attribute with the specified key.","title":"Error responses"},{"location":"api/datapoints/","text":"Entity and Data Subject Attributes POST /entities/{entityId}/attributes Stores attributes for the given entity. For each attribute stored, if the attribute is repeatable, existing data in the vault will not be affected. If the attribute is not repeatable, existing data will be overwritten. If you want to make modifications to a nonrepeatable attribute, the best way is to read the current value, make changes as necessary, and then store the complete modified attribute. If the entity specified does not currently exist in the system, it will be created. By default, the entity will be created as a data subject; the entityType field on the StorageRequest object can be used to override this by specifying a different type of entity to create. Header Parameters Name Type Description X-Encryption-Key String Public encryption key Body Parameters (Required) Name Type Description payload StorageRequest Storage Request Path Variables Name Type Description entityId String Entity Identifier Example Payload { \"data\" : [ { \"accessibility\" : \"Read Only\" , \"attribute\" : \"SAMPLE_ATTRIBUTE\" , \"dataPointId\" : \"string\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"value\" : \"123-456-789\" } ], \"entityType\" : \"datasubject\" , \"namespace\" : \"Example_Namespace\" , \"origin\" : \"127.0.0.1\" } Example Response { \"data\" : [ { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } ] } Error responses Status code Error message Description 400 Encoded key provided is invalid The public encryption key provided is not correct. 400 No such attribute You are attempting to store data for an attribute that does not exist. 400 No such regulation You are attempting to store data that is tagged with a regulation that does not exist. 400 Entity is of type [entityType], which does not match the provided entity type The storage request specifies an entity type to create, but the entity that data is being stored for already exists and is of a different type 400 Attribute is not applicable to entity type You are attempting to store data of an attribute that is not applicable to the entity type of the entity the data belongs to 403 Forbidden access to attribute Your application does not have permission to access some of the attributes of the data you are attempting to store. 403 Cannot overwrite attribute for data subject, as the data subject is under a legal hold You are attempting to store a value of a nonrepeatable attribute for a data subject who already has a value for that attribute, which would overwrite the existing value; however, the data subject is under a legal hold, and so the existing data cannot be overwritten 409 Received multiple values for nonrepeatable attribute You are attempting to store two or more attributes belonging to the same attribute definition, but that attribute definition is not repeatable. 413 Datapoint values may not exceed 1 MB in size You are attempting to store a string that is longer than 1,048,576 characters long. For longer data, set the data's attribute schema to \"file\". 422 Expected [type] for value of attribute [attribute] The value given for the indicated attribute or sub-attribute does not match what is expected according to that attribute's schema . 400 Unknown sub-attribute [sub-attribute] A value given for a structured attribute contains a sub-attribute that is not present in that attribute's schema . GET /entities/{entityId}/attributes/{attributeKey} Displays information about an attribute for one entity Header Parameters Name Type Description X-Decryption-Key String Private decryption key Path Variables Name Type Description entityId String Entity Identifier attributeKey String Attribute Name Example Response { \"data\" : [ { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } ] } Error responses Status code Error message Description 400 Encoded key provided is invalid The private decryption key provided is not correct. 403 Forbidden You are trying to access attributes that your application does not have access to. 404 Data Not Found The specified entity does not exist, or else that entity has no value for the attributes specified. GET /entities/{entityId}/attributes Retrieves attributes for the given entity. By default, returns all attributes that your application has access to; alternatively, a list of desired attributes can be specified. Header Parameters Name Type Description X-Decryption-Key String Private decryption key Path Variables Name Type Description entityId String Entity Identifier Query Parameter Variables Name Type Description attributes Array Comma-delimited list of attribute keys to access (optional) Example Response { \"data\" : [ { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } ] } Error responses Status code Error message Description 400 Encoded key provided is invalid The private decryption key provided is not correct. 403 Forbidden You are trying to access attributes that your application does not have access to. 404 Data Not Found The specified entity does not exist, or else that entity has no value for the attributes specified. DELETE /entities/{entityId}/attributes/{attributeKey} Deletes attributes for the given entity and attribute. Path Variables Name Type Description entityId String Entity Identifier attributeKey String Attribute Key Example Response { \"data\" : \"Successfully Deleted Data Point\" } Error responses Status code Error message Description 403 Forbidden You are trying to delete data from an attribute your application does not have access to. 404 Data Not Found There is no data in the system with the specified entity ID and attribute. GET /data/{dataPointId} Retrieves data with the given datapoint id Header Parameters Name Type Description X-Decryption-Key String Private decryption key Path Variables Name Type Description dataPointId String Datapoint ID Example Response { \"data\" : { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } } Error responses Status code Error message Description 400 Encoded key provided is invalid The private decryption key provided is not correct. 403 Forbidden Your application does not have access to the attribute of the data point you are trying to read. 404 Data Not Found There is no data point in the system with the specified ID. DELETE /data/{dataPointId} Deletes data with the given datapoint id Path Variables Name Type Description dataPointId String Datapoint ID Example Response { \"data\" : \"Successfully Deleted Data Point\" } Error responses Status code Error message Description 403 Forbidden Your application does not have access to the attribute of the data point you are trying to delete. 404 Data Not Found There is no data point in the system with the specified ID. DELETE /datasubjects/{entityId}/data Deletes all data for the given data subject Path Variables Name Type Description entityId String Data Subject Identifier Example Response { \"data\" : \"Successfully Deleted Data Subject\" } Error responses Status code Error message Description 404 Data Subject Not Found There is no data subject in the system with the specified ID. POST /datasubjects/{entityId}/attributes See POST /entities/{entityId}/attributes . GET /datasubjects/{entityId}/attributes/{attributeKey} See GET /entities/{entityId}/attributes/{attributeKey} . GET /datasubjects/{entityId}/attributes See GET /entities/{entityId}/attributes . Additional error responses Status code Error message Description 400 Entity is not a data subject The entity with the specified ID is not a data subject. DELETE /datasubjects/{entityId}/attributes/{attributeKey} See DELETE /entities/{entityId}/attributes/{attributeKey} . Additional error responses Status code Error message Description 400 Entity is not of type datasubject The entity with the specified ID is not a data subject. DELETE /datasubjects/{entityId}/data See DELETE /entities/{entityId}/data . Additional error responses Status code Error message Description 400 Entity is not of type datasubject The entity with the specified ID is not a data subject. POST /search Searches data that matches specified criteria, using blind indexing to allow searching for values without decrypting data. For more information, read about ViziVault search . Body Parameters (Required) Name Type Description request DataSearchRequest Parameters to search for Example Payload { \"query\" : { \"values\" : [ { \"attribute\" : \"SAMPLE_ATTRIBUTE_1\" , \"value\" : \"Value of sample attribute 1\" }, { \"attribute\" : \"SAMPLE_ATTRIBUTE_2\" , \"value\" : \"Value of sample attribute 2\" } ], \"attributes\" : [ \"SAMPLE_ATTRIBUTE_3\" , \"SAMPLE_ATTRIBUTE_4\" ], \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"NORMAL\" , \"entityId\" : [ \"001\" , \"002\" , \"003\" ], \"country\" : \"US\" , \"minCreatedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"maxCreatedDate\" : \"2020-01-31T10:06:32.4426+08:00\" }, \"page\" : 0 , \"count\" : 100 } Example Response { \"data\" : [ { \"attribute\" : \"SAMPLE_ATTRIBUTE_2\" , \"createdDate\" : \"2020-01-15T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"NORMAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , } ] } Error responses Status code Error message Description 404 Data Not Found No search results were found for the provided query.","title":"Attributes"},{"location":"api/datapoints/#entity-and-data-subject-attributes","text":"","title":"Entity and Data Subject Attributes"},{"location":"api/datapoints/#post-entitiesentityidattributes","text":"Stores attributes for the given entity. For each attribute stored, if the attribute is repeatable, existing data in the vault will not be affected. If the attribute is not repeatable, existing data will be overwritten. If you want to make modifications to a nonrepeatable attribute, the best way is to read the current value, make changes as necessary, and then store the complete modified attribute. If the entity specified does not currently exist in the system, it will be created. By default, the entity will be created as a data subject; the entityType field on the StorageRequest object can be used to override this by specifying a different type of entity to create.","title":"POST /entities/{entityId}/attributes"},{"location":"api/datapoints/#header-parameters","text":"Name Type Description X-Encryption-Key String Public encryption key","title":"Header Parameters"},{"location":"api/datapoints/#body-parameters-required","text":"Name Type Description payload StorageRequest Storage Request","title":"Body Parameters (Required)"},{"location":"api/datapoints/#path-variables","text":"Name Type Description entityId String Entity Identifier","title":"Path Variables"},{"location":"api/datapoints/#example-payload","text":"{ \"data\" : [ { \"accessibility\" : \"Read Only\" , \"attribute\" : \"SAMPLE_ATTRIBUTE\" , \"dataPointId\" : \"string\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"value\" : \"123-456-789\" } ], \"entityType\" : \"datasubject\" , \"namespace\" : \"Example_Namespace\" , \"origin\" : \"127.0.0.1\" }","title":"Example Payload"},{"location":"api/datapoints/#example-response","text":"{ \"data\" : [ { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } ] }","title":"Example Response"},{"location":"api/datapoints/#error-responses","text":"Status code Error message Description 400 Encoded key provided is invalid The public encryption key provided is not correct. 400 No such attribute You are attempting to store data for an attribute that does not exist. 400 No such regulation You are attempting to store data that is tagged with a regulation that does not exist. 400 Entity is of type [entityType], which does not match the provided entity type The storage request specifies an entity type to create, but the entity that data is being stored for already exists and is of a different type 400 Attribute is not applicable to entity type You are attempting to store data of an attribute that is not applicable to the entity type of the entity the data belongs to 403 Forbidden access to attribute Your application does not have permission to access some of the attributes of the data you are attempting to store. 403 Cannot overwrite attribute for data subject, as the data subject is under a legal hold You are attempting to store a value of a nonrepeatable attribute for a data subject who already has a value for that attribute, which would overwrite the existing value; however, the data subject is under a legal hold, and so the existing data cannot be overwritten 409 Received multiple values for nonrepeatable attribute You are attempting to store two or more attributes belonging to the same attribute definition, but that attribute definition is not repeatable. 413 Datapoint values may not exceed 1 MB in size You are attempting to store a string that is longer than 1,048,576 characters long. For longer data, set the data's attribute schema to \"file\". 422 Expected [type] for value of attribute [attribute] The value given for the indicated attribute or sub-attribute does not match what is expected according to that attribute's schema . 400 Unknown sub-attribute [sub-attribute] A value given for a structured attribute contains a sub-attribute that is not present in that attribute's schema .","title":"Error responses"},{"location":"api/datapoints/#get-entitiesentityidattributesattributekey","text":"Displays information about an attribute for one entity","title":"GET /entities/{entityId}/attributes/{attributeKey}"},{"location":"api/datapoints/#header-parameters_1","text":"Name Type Description X-Decryption-Key String Private decryption key","title":"Header Parameters"},{"location":"api/datapoints/#path-variables_1","text":"Name Type Description entityId String Entity Identifier attributeKey String Attribute Name","title":"Path Variables"},{"location":"api/datapoints/#example-response_1","text":"{ \"data\" : [ { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } ] }","title":"Example Response"},{"location":"api/datapoints/#error-responses_1","text":"Status code Error message Description 400 Encoded key provided is invalid The private decryption key provided is not correct. 403 Forbidden You are trying to access attributes that your application does not have access to. 404 Data Not Found The specified entity does not exist, or else that entity has no value for the attributes specified.","title":"Error responses"},{"location":"api/datapoints/#get-entitiesentityidattributes","text":"Retrieves attributes for the given entity. By default, returns all attributes that your application has access to; alternatively, a list of desired attributes can be specified.","title":"GET /entities/{entityId}/attributes"},{"location":"api/datapoints/#header-parameters_2","text":"Name Type Description X-Decryption-Key String Private decryption key","title":"Header Parameters"},{"location":"api/datapoints/#path-variables_2","text":"Name Type Description entityId String Entity Identifier","title":"Path Variables"},{"location":"api/datapoints/#query-parameter-variables","text":"Name Type Description attributes Array Comma-delimited list of attribute keys to access (optional)","title":"Query Parameter Variables"},{"location":"api/datapoints/#example-response_2","text":"{ \"data\" : [ { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } ] }","title":"Example Response"},{"location":"api/datapoints/#error-responses_2","text":"Status code Error message Description 400 Encoded key provided is invalid The private decryption key provided is not correct. 403 Forbidden You are trying to access attributes that your application does not have access to. 404 Data Not Found The specified entity does not exist, or else that entity has no value for the attributes specified.","title":"Error responses"},{"location":"api/datapoints/#delete-entitiesentityidattributesattributekey","text":"Deletes attributes for the given entity and attribute.","title":"DELETE /entities/{entityId}/attributes/{attributeKey}"},{"location":"api/datapoints/#path-variables_3","text":"Name Type Description entityId String Entity Identifier attributeKey String Attribute Key","title":"Path Variables"},{"location":"api/datapoints/#example-response_3","text":"{ \"data\" : \"Successfully Deleted Data Point\" }","title":"Example Response"},{"location":"api/datapoints/#error-responses_3","text":"Status code Error message Description 403 Forbidden You are trying to delete data from an attribute your application does not have access to. 404 Data Not Found There is no data in the system with the specified entity ID and attribute.","title":"Error responses"},{"location":"api/datapoints/#get-datadatapointid","text":"Retrieves data with the given datapoint id","title":"GET /data/{dataPointId}"},{"location":"api/datapoints/#header-parameters_3","text":"Name Type Description X-Decryption-Key String Private decryption key","title":"Header Parameters"},{"location":"api/datapoints/#path-variables_4","text":"Name Type Description dataPointId String Datapoint ID","title":"Path Variables"},{"location":"api/datapoints/#example-response_4","text":"{ \"data\" : { \"attribute\" : \"NAME_FIRST\" , \"createdDate\" : \"2020-01-01T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"PERSONAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , \"value\" : \"123-456-789\" } }","title":"Example Response"},{"location":"api/datapoints/#error-responses_4","text":"Status code Error message Description 400 Encoded key provided is invalid The private decryption key provided is not correct. 403 Forbidden Your application does not have access to the attribute of the data point you are trying to read. 404 Data Not Found There is no data point in the system with the specified ID.","title":"Error responses"},{"location":"api/datapoints/#delete-datadatapointid","text":"Deletes data with the given datapoint id","title":"DELETE /data/{dataPointId}"},{"location":"api/datapoints/#path-variables_5","text":"Name Type Description dataPointId String Datapoint ID","title":"Path Variables"},{"location":"api/datapoints/#example-response_5","text":"{ \"data\" : \"Successfully Deleted Data Point\" }","title":"Example Response"},{"location":"api/datapoints/#error-responses_5","text":"Status code Error message Description 403 Forbidden Your application does not have access to the attribute of the data point you are trying to delete. 404 Data Not Found There is no data point in the system with the specified ID.","title":"Error responses"},{"location":"api/datapoints/#delete-datasubjectsentityiddata","text":"Deletes all data for the given data subject","title":"DELETE /datasubjects/{entityId}/data"},{"location":"api/datapoints/#path-variables_6","text":"Name Type Description entityId String Data Subject Identifier","title":"Path Variables"},{"location":"api/datapoints/#example-response_6","text":"{ \"data\" : \"Successfully Deleted Data Subject\" }","title":"Example Response"},{"location":"api/datapoints/#error-responses_6","text":"Status code Error message Description 404 Data Subject Not Found There is no data subject in the system with the specified ID.","title":"Error responses"},{"location":"api/datapoints/#post-datasubjectsentityidattributes","text":"See POST /entities/{entityId}/attributes .","title":"POST /datasubjects/{entityId}/attributes"},{"location":"api/datapoints/#get-datasubjectsentityidattributesattributekey","text":"See GET /entities/{entityId}/attributes/{attributeKey} .","title":"GET /datasubjects/{entityId}/attributes/{attributeKey}"},{"location":"api/datapoints/#get-datasubjectsentityidattributes","text":"See GET /entities/{entityId}/attributes .","title":"GET /datasubjects/{entityId}/attributes"},{"location":"api/datapoints/#additional-error-responses","text":"Status code Error message Description 400 Entity is not a data subject The entity with the specified ID is not a data subject.","title":"Additional error responses"},{"location":"api/datapoints/#delete-datasubjectsentityidattributesattributekey","text":"See DELETE /entities/{entityId}/attributes/{attributeKey} .","title":"DELETE /datasubjects/{entityId}/attributes/{attributeKey}"},{"location":"api/datapoints/#additional-error-responses_1","text":"Status code Error message Description 400 Entity is not of type datasubject The entity with the specified ID is not a data subject.","title":"Additional error responses"},{"location":"api/datapoints/#delete-datasubjectsentityiddata_1","text":"See DELETE /entities/{entityId}/data .","title":"DELETE /datasubjects/{entityId}/data"},{"location":"api/datapoints/#additional-error-responses_2","text":"Status code Error message Description 400 Entity is not of type datasubject The entity with the specified ID is not a data subject.","title":"Additional error responses"},{"location":"api/datapoints/#post-search","text":"Searches data that matches specified criteria, using blind indexing to allow searching for values without decrypting data. For more information, read about ViziVault search .","title":"POST /search"},{"location":"api/datapoints/#body-parameters-required_1","text":"Name Type Description request DataSearchRequest Parameters to search for","title":"Body Parameters (Required)"},{"location":"api/datapoints/#example-payload_1","text":"{ \"query\" : { \"values\" : [ { \"attribute\" : \"SAMPLE_ATTRIBUTE_1\" , \"value\" : \"Value of sample attribute 1\" }, { \"attribute\" : \"SAMPLE_ATTRIBUTE_2\" , \"value\" : \"Value of sample attribute 2\" } ], \"attributes\" : [ \"SAMPLE_ATTRIBUTE_3\" , \"SAMPLE_ATTRIBUTE_4\" ], \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"NORMAL\" , \"entityId\" : [ \"001\" , \"002\" , \"003\" ], \"country\" : \"US\" , \"minCreatedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"maxCreatedDate\" : \"2020-01-31T10:06:32.4426+08:00\" }, \"page\" : 0 , \"count\" : 100 }","title":"Example Payload"},{"location":"api/datapoints/#example-response_7","text":"{ \"data\" : [ { \"attribute\" : \"SAMPLE_ATTRIBUTE_2\" , \"createdDate\" : \"2020-01-15T10:05:59.5646+08:00\" , \"dataPointId\" : \"a9fcbf23-852f-441e-b729-dc9fffa528f7\" , \"modifiedDate\" : \"2020-01-01T10:06:32.4426+08:00\" , \"regulations\" : [ \"SAMPLE_REGULATION\" ], \"sensitivity\" : \"NORMAL\" , \"reportOnly\" : false , \"structureRootId\" : null , \"entityId\" : \"001\" , } ] }","title":"Example Response"},{"location":"api/datapoints/#error-responses_7","text":"Status code Error message Description 404 Data Not Found No search results were found for the provided query.","title":"Error responses"},{"location":"api/endpoints/","text":"API Endpoints Guides and reference materials to help you get started, integrate, optimize, and troubleshoot your use of the ViziVault Platform. Attribute Definitions POST /attributes GET /attributes GET /attributes/{attributeKey} DELETE /attributes/{attributeKey} Tags POST\u200b /tags GET /tags GET /tags/{tagName} DELETE /tags/{tagName} Data Subject / Entity Attributes POST /entities/{entityId}/attributes POST /datasubjects/{entityId}/attributes GET /entities/{entityId}/attributes GET /entities/{entityId}/attribute/{attributeKey} GET /datasubjects/{entityId}/attributes GET /datasubjects/{entityId}/attribute/{attributeKey} GET /data/{dataPointId} DELETE /entities/{entityId}/attributes/{attributeKey} DELETE /entities/{entityId}/data DELETE /datasubjects/{entityId}/attributes/{attributeKey} DELETE /datasubjects/{entityId}/data DELETE /data/{dataPointId} POST /search Report-Only Audit Log POST /auditlogs POST /auditlogs/bulk Regulations POST /regulations GET /regulations GET /regulations/{regulation} DELETE /regulations/{regulation} Rules POST /rules GET /rules GET /rules/{rule} DELETE /rules/{rule} Data Subjects / Entities POST /entities GET /entities GET /entities/{entityId} POST /datasubjects GET /datasubjects GET /datasubjects/{entityId} Entity Types POST /entitytypes GET /entitytypes GET /entitytypes/{typeKey} DELETE /entitytypes/{typeKey}","title":"Endpoint reference"},{"location":"api/endpoints/#api-endpoints","text":"Guides and reference materials to help you get started, integrate, optimize, and troubleshoot your use of the ViziVault Platform.","title":"API Endpoints"},{"location":"api/endpoints/#attribute-definitions","text":"POST /attributes GET /attributes GET /attributes/{attributeKey} DELETE /attributes/{attributeKey}","title":"Attribute Definitions"},{"location":"api/endpoints/#tags","text":"POST\u200b /tags GET /tags GET /tags/{tagName} DELETE /tags/{tagName}","title":"Tags"},{"location":"api/endpoints/#data-subject-entity-attributes","text":"POST /entities/{entityId}/attributes POST /datasubjects/{entityId}/attributes GET /entities/{entityId}/attributes GET /entities/{entityId}/attribute/{attributeKey} GET /datasubjects/{entityId}/attributes GET /datasubjects/{entityId}/attribute/{attributeKey} GET /data/{dataPointId} DELETE /entities/{entityId}/attributes/{attributeKey} DELETE /entities/{entityId}/data DELETE /datasubjects/{entityId}/attributes/{attributeKey} DELETE /datasubjects/{entityId}/data DELETE /data/{dataPointId} POST /search","title":"Data Subject / Entity Attributes"},{"location":"api/endpoints/#report-only-audit-log","text":"POST /auditlogs POST /auditlogs/bulk","title":"Report-Only Audit Log"},{"location":"api/endpoints/#regulations","text":"POST /regulations GET /regulations GET /regulations/{regulation} DELETE /regulations/{regulation}","title":"Regulations"},{"location":"api/endpoints/#rules","text":"POST /rules GET /rules GET /rules/{rule} DELETE /rules/{rule}","title":"Rules"},{"location":"api/endpoints/#data-subjects-entities","text":"POST /entities GET /entities GET /entities/{entityId} POST /datasubjects GET /datasubjects GET /datasubjects/{entityId}","title":"Data Subjects / Entities"},{"location":"api/endpoints/#entity-types","text":"POST /entitytypes GET /entitytypes GET /entitytypes/{typeKey} DELETE /entitytypes/{typeKey}","title":"Entity Types"},{"location":"api/entities/","text":"Attributes POST /entities Stores metadata associated with an entity. Returns an Entity object. Parameters Body Parameters (Required) Name Type Description payload Entity Description of entity to store Example payload { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [ \"ExampleTag\" ] } Example response { \"data\" : { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [ \"ExampleTag\" ], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , } } GET /entities/{entityId} Displays information about one entity. Returns an Entity object. Path Parameters Name Type Description entityId String ID of the entity to describe Example response { \"data\" : { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , } } Error responses Status code Error message Description 404 Not found The system does not contain an entity with the specified id. GET /entities Retrieves metadata for all entities in the system. Returns a list of Entity objects. Parameters None Example response { \"data\" : [ { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , }, { \"id\" : \"user0002\" , \"type\" : \"datasubject\" , \"tags\" : [], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , }, ] } POST /datasubjects See POST /entities . It is not necessary to specify the entity type when using this endpoint, as it will be assumed to be datasubject . GET /datasubjects/{entityId} See GET /entities/{entityId} . Additional error responses Status code Error message Description 400 Entity is not a data subject The entity with the specified ID is not a data subject. GET /datasubjects Retrieves metadata for all data subjects in the system (that is, all entities that belong to the datasubject type).","title":"Data Subjects and Entities"},{"location":"api/entities/#attributes","text":"","title":"Attributes"},{"location":"api/entities/#post-entities","text":"Stores metadata associated with an entity. Returns an Entity object.","title":"POST /entities"},{"location":"api/entities/#parameters","text":"","title":"Parameters"},{"location":"api/entities/#body-parameters-required","text":"Name Type Description payload Entity Description of entity to store","title":"Body Parameters (Required)"},{"location":"api/entities/#example-payload","text":"{ \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [ \"ExampleTag\" ] }","title":"Example payload"},{"location":"api/entities/#example-response","text":"{ \"data\" : { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [ \"ExampleTag\" ], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , } }","title":"Example response"},{"location":"api/entities/#get-entitiesentityid","text":"Displays information about one entity. Returns an Entity object.","title":"GET /entities/{entityId}"},{"location":"api/entities/#path-parameters","text":"Name Type Description entityId String ID of the entity to describe","title":"Path Parameters"},{"location":"api/entities/#example-response_1","text":"{ \"data\" : { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , } }","title":"Example response"},{"location":"api/entities/#error-responses","text":"Status code Error message Description 404 Not found The system does not contain an entity with the specified id.","title":"Error responses"},{"location":"api/entities/#get-entities","text":"Retrieves metadata for all entities in the system. Returns a list of Entity objects.","title":"GET /entities"},{"location":"api/entities/#parameters_1","text":"None","title":"Parameters"},{"location":"api/entities/#example-response_2","text":"{ \"data\" : [ { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , }, { \"id\" : \"user0002\" , \"type\" : \"datasubject\" , \"tags\" : [], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , }, ] }","title":"Example response"},{"location":"api/entities/#post-datasubjects","text":"See POST /entities . It is not necessary to specify the entity type when using this endpoint, as it will be assumed to be datasubject .","title":"POST /datasubjects"},{"location":"api/entities/#get-datasubjectsentityid","text":"See GET /entities/{entityId} .","title":"GET /datasubjects/{entityId}"},{"location":"api/entities/#additional-error-responses","text":"Status code Error message Description 400 Entity is not a data subject The entity with the specified ID is not a data subject.","title":"Additional error responses"},{"location":"api/entities/#get-datasubjects","text":"Retrieves metadata for all data subjects in the system (that is, all entities that belong to the datasubject type).","title":"GET /datasubjects"},{"location":"api/entitytypes/","text":"Entity Types POST /entitytypes Creates or edits an entity type. If there is an existing entity type in the system with the provided key , that type will be updated; otherwise, a new entity type will be created. Parameters Body Parameters (Required) Name Type Description payload EntityType Description of new entity type Example payload { \"key\" : \"sampleEntityType\" , \"name\" : \"Sample Entity Type\" , \"description\" : \"An example of an entity type\" } GET /entitytypes Retrieves data for all entity types in the system. Returns a list of EntityType objects. Parameters None Example response { \"data\" : [ { \"key\" : \"sampleEntityType\" , \"name\" : \"Sample Entity Type\" , \"description\" : \"An example of an entity type\" }, { \"key\" : \"datasubject\" , \"name\" : \"Data Subject\" , \"description\" : \"A natural person about whom data is collected\" } ] } GET /entitytypes/{typeKey} Displays information about one entity type. Returns an EntityType object. Path Parameters Name Type Description typeKey String Key of the entity type to describe Example response { \"data\" : { \"key\" : \"datasubject\" , \"name\" : \"Data Subject\" , \"description\" : \"A natural person about whom data is collected\" } } Error responses Status code Error message Description 404 No such entity type The system does not contain an entity type with the specified key. DELETE /entitytypes/{typeKey} Deletes an entity type if it is not being used. Path Parameters Name Type Description typeKey String Key of the entity type to delete Example response { \"data\" : \"Successfully Deleted Entity Type\" } Error responses Status code Error message Description 405 Cannot delete entity type, as it is managed by the system You are trying to delete an entity type such as datasubject that is required for the functioning of the system. 409 Cannot delete entity type, as there are entities belonging to it There are existing entities in the system that belong to this entity type, and as such it cannot be deleted. 409 Cannot delete entity type, as there are attributes referencing it There are attribute definitions in the system that are applicable to this entity type, and as such it cannot be deleted until it has been removed from those types. 404 Entity type not found The system does not contain an attribute with the specified key.","title":"Entity Types"},{"location":"api/entitytypes/#entity-types","text":"","title":"Entity Types"},{"location":"api/entitytypes/#post-entitytypes","text":"Creates or edits an entity type. If there is an existing entity type in the system with the provided key , that type will be updated; otherwise, a new entity type will be created.","title":"POST /entitytypes"},{"location":"api/entitytypes/#parameters","text":"","title":"Parameters"},{"location":"api/entitytypes/#body-parameters-required","text":"Name Type Description payload EntityType Description of new entity type","title":"Body Parameters (Required)"},{"location":"api/entitytypes/#example-payload","text":"{ \"key\" : \"sampleEntityType\" , \"name\" : \"Sample Entity Type\" , \"description\" : \"An example of an entity type\" }","title":"Example payload"},{"location":"api/entitytypes/#get-entitytypes","text":"Retrieves data for all entity types in the system. Returns a list of EntityType objects.","title":"GET /entitytypes"},{"location":"api/entitytypes/#parameters_1","text":"None","title":"Parameters"},{"location":"api/entitytypes/#example-response","text":"{ \"data\" : [ { \"key\" : \"sampleEntityType\" , \"name\" : \"Sample Entity Type\" , \"description\" : \"An example of an entity type\" }, { \"key\" : \"datasubject\" , \"name\" : \"Data Subject\" , \"description\" : \"A natural person about whom data is collected\" } ] }","title":"Example response"},{"location":"api/entitytypes/#get-entitytypestypekey","text":"Displays information about one entity type. Returns an EntityType object.","title":"GET /entitytypes/{typeKey}"},{"location":"api/entitytypes/#path-parameters","text":"Name Type Description typeKey String Key of the entity type to describe","title":"Path Parameters"},{"location":"api/entitytypes/#example-response_1","text":"{ \"data\" : { \"key\" : \"datasubject\" , \"name\" : \"Data Subject\" , \"description\" : \"A natural person about whom data is collected\" } }","title":"Example response"},{"location":"api/entitytypes/#error-responses","text":"Status code Error message Description 404 No such entity type The system does not contain an entity type with the specified key.","title":"Error responses"},{"location":"api/entitytypes/#delete-entitytypestypekey","text":"Deletes an entity type if it is not being used.","title":"DELETE /entitytypes/{typeKey}"},{"location":"api/entitytypes/#path-parameters_1","text":"Name Type Description typeKey String Key of the entity type to delete","title":"Path Parameters"},{"location":"api/entitytypes/#example-response_2","text":"{ \"data\" : \"Successfully Deleted Entity Type\" }","title":"Example response"},{"location":"api/entitytypes/#error-responses_1","text":"Status code Error message Description 405 Cannot delete entity type, as it is managed by the system You are trying to delete an entity type such as datasubject that is required for the functioning of the system. 409 Cannot delete entity type, as there are entities belonging to it There are existing entities in the system that belong to this entity type, and as such it cannot be deleted. 409 Cannot delete entity type, as there are attributes referencing it There are attribute definitions in the system that are applicable to this entity type, and as such it cannot be deleted until it has been removed from those types. 404 Entity type not found The system does not contain an attribute with the specified key.","title":"Error responses"},{"location":"api/regulations/","text":"Regulations POST /regulations Creates or edits a regulation. If there is an existing regulation in the system with the key of the provided regulation, that regulation will be updated; otherwise, a new regulation will be created. Parameters Body Parameters (Required) Name Type Description payload Regulation Description of new regulation Example payload { \"key\" : \"SAMPLE_REGULATION\" , \"name\" : \"Sample Regulation\" , \"url\" : \"https://example.com/regulation\" } Example response { \"data\" : \"Regulation created\" } Error responses Status code Error message Description 402 Your current subscription is limited to (number) custom regulations Your current license has a hard limit on the number of regulations created, and you have reached the limit GET /regulations Retrieves data for all regulations in the system. Returns a list of Regulation objects. Parameters None Example response { \"data\" : [ { \"key\" : \"SAMPLE_REGULATION\" , \"name\" : \"Sample Regulation\" , \"url\" : \"https://example.com/regulation\" , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } ] } GET /regulations/{regulationKey} Displays information about one regulation. Returns a Regulation object, or 404 Not Found if there is no regulation with the specified key. Path Parameters Name Type Description regulationKey String Key of the regulation to describe Example response { \"data\" : { \"key\" : \"SAMPLE_REGULATION\" , \"name\" : \"Sample Regulation\" , \"url\" : \"https://example.com/regulation\" , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } } Error responses Status code Error message Description 404 No such regulation The system does not contain a regulation with the specified key. DELETE /regulations/{regulationKey} Deletes a specified regulation, and untags it from all attributes. Returns 404 Not Found if there is no regulation with the specified key. Path Parameters Name Type Description regulationKey String Key of the regulation to delete Example response { \"data\" : \"Regulation deleted\" } Error responses Status code Error message Description 404 Regulation not found The system does not contain a regulation with the specified key.","title":"Regulations"},{"location":"api/regulations/#regulations","text":"","title":"Regulations"},{"location":"api/regulations/#post-regulations","text":"Creates or edits a regulation. If there is an existing regulation in the system with the key of the provided regulation, that regulation will be updated; otherwise, a new regulation will be created.","title":"POST /regulations"},{"location":"api/regulations/#parameters","text":"","title":"Parameters"},{"location":"api/regulations/#body-parameters-required","text":"Name Type Description payload Regulation Description of new regulation","title":"Body Parameters (Required)"},{"location":"api/regulations/#example-payload","text":"{ \"key\" : \"SAMPLE_REGULATION\" , \"name\" : \"Sample Regulation\" , \"url\" : \"https://example.com/regulation\" }","title":"Example payload"},{"location":"api/regulations/#example-response","text":"{ \"data\" : \"Regulation created\" }","title":"Example response"},{"location":"api/regulations/#error-responses","text":"Status code Error message Description 402 Your current subscription is limited to (number) custom regulations Your current license has a hard limit on the number of regulations created, and you have reached the limit","title":"Error responses"},{"location":"api/regulations/#get-regulations","text":"Retrieves data for all regulations in the system. Returns a list of Regulation objects.","title":"GET /regulations"},{"location":"api/regulations/#parameters_1","text":"None","title":"Parameters"},{"location":"api/regulations/#example-response_1","text":"{ \"data\" : [ { \"key\" : \"SAMPLE_REGULATION\" , \"name\" : \"Sample Regulation\" , \"url\" : \"https://example.com/regulation\" , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } ] }","title":"Example response"},{"location":"api/regulations/#get-regulationsregulationkey","text":"Displays information about one regulation. Returns a Regulation object, or 404 Not Found if there is no regulation with the specified key.","title":"GET /regulations/{regulationKey}"},{"location":"api/regulations/#path-parameters","text":"Name Type Description regulationKey String Key of the regulation to describe","title":"Path Parameters"},{"location":"api/regulations/#example-response_2","text":"{ \"data\" : { \"key\" : \"SAMPLE_REGULATION\" , \"name\" : \"Sample Regulation\" , \"url\" : \"https://example.com/regulation\" , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } }","title":"Example response"},{"location":"api/regulations/#error-responses_1","text":"Status code Error message Description 404 No such regulation The system does not contain a regulation with the specified key.","title":"Error responses"},{"location":"api/regulations/#delete-regulationsregulationkey","text":"Deletes a specified regulation, and untags it from all attributes. Returns 404 Not Found if there is no regulation with the specified key.","title":"DELETE /regulations/{regulationKey}"},{"location":"api/regulations/#path-parameters_1","text":"Name Type Description regulationKey String Key of the regulation to delete","title":"Path Parameters"},{"location":"api/regulations/#example-response_3","text":"{ \"data\" : \"Regulation deleted\" }","title":"Example response"},{"location":"api/regulations/#error-responses_2","text":"Status code Error message Description 404 Regulation not found The system does not contain a regulation with the specified key.","title":"Error responses"},{"location":"api/reportonly/","text":"Report-Only Data POST /auditlogs Records activity for report-only data; that is, data that is not stored in the vault but is still being monitored. The purpose of this endpoint is to collect metadata about how sensitive data stored in external systems is being used. While writes of external data can be recorded using the same API endpoint used for storing data in the vault , this endpoint allows recording reads and deletes as well as writes, as well as allowing more metadata to be expressed. Parameters Body Parameters (Required) Name Type Description payload ExternalActivityEvent Description of accesses to externally-stored data The structure of the ExternalActivityEvent object is as follows: Name Type Description Usage eventType String One of \"READ\", \"STORE\", \"DELETE\", or \"UPDATE\". Required dataPointId String Unique identifier for the attribute being accessed. This can be an identifier that is created externally or one that is generated by ViziVault. Optional for \"STORE\" events (a new data point ID will be generated by ViziVault in this case); required for other events. subjectId String Unique identifier for the data subject whom this attribute belongs to Required for \"STORE\" events; optional for other events as it can be derived from the data point id. data Attribute The attribute being saved for a \"STORE\" or \"UPDATE\" event. For \"STORE\" events, data must contain attribute , and all other fields that would be used when storing data in the vault are optional. For \"UPDATE\" events, all fields of data other than value are ignored. In either case, if a value is supplied, it will be used by the rules engine but it will not be stored. timestamp Date The time at which the access occurred. If not specified, the current time will be assumed. Optional applicationId String Unique identifier for the application that was used to initiate this access. Required applicationUser String Identifier for the application user who initiated this access. Optional dataStoreName String Identifier for a database in which this event happened. Optional dataStoreServer String Identifier for a database server on which this event happened. Optional dataStoreEntityName String Identifier for a collection or table within a database in which this event happened. Optional location Geolocation The geographic country, subdivision, and/or city where this access was initiated from. Optional Example payload { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"data\" : { \"attribute\" : \"SHIPPING_ADDRESS\" , \"value\" : { \"line_one\" : \"1 Hacker Way\" , \"city\" : \"Beverly Hills\" , \"state\" : \"CA\" , \"postal_code\" : \"90210\" }, \"tags\" : [ \"tag1\" , \"tag2\" ], \"regulations\" : [ \"COPPA\" , \"GDPR\" ], \"sensitivity\" : \"SENSITIVE\" }, \"timestamp\" : \"2021-01-01T00:00:00Z\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" , \"applicationUser\" : \"csmith97\" , \"location\" : { \"country\" : \"US\" , \"subdivision\" : \"NY\" , \"city\" : \"Albany\" } } Example response On success, returns 200 OK and a summary of the accesses that were recorded, including newly-generated datapoint IDs for any newly-stored attributes that did not already have them. { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"attribute\" : \"SHIPPING_ADDRESS\" , \"subPoints\" : [ { \"attribute\" : \"SHIPPING_ADDRESS.line_one\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce626\" }, { \"attribute\" : \"SHIPPING_ADDRESS.city\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce627\" }, { \"attribute\" : \"SHIPPING_ADDRESS.state\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce628\" }, { \"attribute\" : \"SHIPPING_ADDRESS.postal_code\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce629\" } ] } Error responses Status code Error message Description 400 Event type is required The event type for an activity event was not specified. 400 Unrecognized event type The event type for an activity event was something other than READ , STORE , UPDATE , or DELETE . 400 Data point ID is required for events other than creation An activity event whose event type was not STORE had no datapoint ID specified. 409 Cannot create data point with ID, as there is already a point with that ID A STORE event had a data point ID specified, but the system already contained an attribute with that datapoint ID 409 Attribute given for datapoint ID does not match attribute of existing point with that ID An UPDATE event had an attribute definition specified that does not match the attribute being updated 409 Data subject ID given for datapoint ID does not match attribute of existing point with that ID An UPDATE event had a data subject id specified that does not match the attribute being updated 400 No such attribute You are attempting to report activity for data belonging to an attribute that does not exist. 422 Expected [type] for value of attribute [attribute] The value provided for the indicated attribute or sub-attribute does not match what is expected according to that attribute's schema . 422 Unknown sub-attribute [sub-attribute] A value provided for a structured attribute contains a sub-attribute that is not present in that attribute's schema . 400 Timestamp out of range A timestamp was provided for the event that is more than one day in the future. 400 Application ID is required The application ID was not specified. 403 The provided data could not be stored, as a rule disallows it A rule has been configured that prohibits writing some of the data that was reported as having been stored. POST /auditlogs/bulk Identical to POST /auditlogs , but handles multiple events in one request. Body Parameters (Required) Name Type Description payload List<ExternalActivityEvent> List of accesses to externally-stored data Example payload [ { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"data\" : { \"attribute\" : \"SHIPPING_ADDRESS\" , \"value\" : { \"line_one\" : \"1 Hacker Way\" , \"city\" : \"Beverly Hills\" , \"state\" : \"CA\" , \"postal_code\" : \"90210\" }, \"tags\" : [ \"tag1\" , \"tag2\" ], \"regulations\" : [ \"COPPA\" , \"GDPR\" ], \"sensitivity\" : \"SENSITIVE\" }, \"timestamp\" : \"2021-01-01T00:00:00Z\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" , \"applicationUser\" : \"csmith97\" , \"location\" : { \"country\" : \"US\" , \"subdivision\" : \"NY\" , \"city\" : \"Albany\" } }, { \"eventType\" : \"READ\" , \"subjectId\" : \"user65536\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"timestamp\" : \"2021-01-01T00:00:00Z\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" , \"applicationUser\" : \"csmith97\" , \"location\" : { \"country\" : \"US\" , \"subdivision\" : \"NY\" , \"city\" : \"Albany\" } }, { \"eventType\" : \"READ\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" }, { \"eventType\" : \"STORE\" , \"subjectId\" : \"user01024\" , \"data\" : { \"attribute\" : \"BILLING_ADDRESS\" , }, \"applicationId\" : \"5eabb29fac3675476ae1ec48\" } ] Example response On success, returns 200 OK and a summary of the accesses that were recorded, including newly-generated datapoint IDs for any newly-stored attributes that did not already have them. [ { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"attribute\" : \"SHIPPING_ADDRESS\" , \"subPoints\" : [ { \"attribute\" : \"SHIPPING_ADDRESS.line_one\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce626\" }, { \"attribute\" : \"SHIPPING_ADDRESS.city\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce627\" }, { \"attribute\" : \"SHIPPING_ADDRESS.state\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce628\" }, { \"attribute\" : \"SHIPPING_ADDRESS.postal_code\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce629\" } ] }, { \"eventType\" : \"READ\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"attribute\" : \"SHIPPING_ADDRESS\" }, { \"eventType\" : \"READ\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"subjectId\" : \"user01024\" , \"attribute\" : \"BILLING_ADDRESS\" }, { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"subjectId\" : \"user01024\" , \"attribute\" : \"BILLING_ADDRESS\" , } ] Error responses Status code Error message Description 400 Event type is required The event type for an activity event was not specified. 400 Unrecognized event type The event type for an activity event was something other than READ , STORE , UPDATE , or DELETE . 400 Data point ID is required for events other than creation An activity event whose event type was not STORE had no datapoint ID specified. 409 Data point ID is in use A STORE event had a data point ID specified, but the system already contained an attribute with that datapoint ID that belonged to a different data subject ID and/or attribute definition 400 No such attribute You are attempting to report activity for data belonging to an attribute that does not exist. 400 Expected [type] for value of attribute [attribute] The value provided for the indicated attribute or sub-attribute does not match what is expected according to that attribute's schema . 400 Unknown sub-attribute [sub-attribute] A value provided for a structured attribute contains a sub-attribute that is not present in that attribute's schema . 400 Timestamp out of range A timestamp was provided for the event that is more than one day in the future. 400 Application ID is required The application ID was not specified. 403 The provided data could not be stored, as a rule disallows it A rule has been configured that prohibits writing some of the data that was reported as having been stored.","title":"Report-Only Auditing"},{"location":"api/reportonly/#report-only-data","text":"","title":"Report-Only Data"},{"location":"api/reportonly/#post-auditlogs","text":"Records activity for report-only data; that is, data that is not stored in the vault but is still being monitored. The purpose of this endpoint is to collect metadata about how sensitive data stored in external systems is being used. While writes of external data can be recorded using the same API endpoint used for storing data in the vault , this endpoint allows recording reads and deletes as well as writes, as well as allowing more metadata to be expressed.","title":"POST /auditlogs"},{"location":"api/reportonly/#parameters","text":"","title":"Parameters"},{"location":"api/reportonly/#body-parameters-required","text":"Name Type Description payload ExternalActivityEvent Description of accesses to externally-stored data The structure of the ExternalActivityEvent object is as follows: Name Type Description Usage eventType String One of \"READ\", \"STORE\", \"DELETE\", or \"UPDATE\". Required dataPointId String Unique identifier for the attribute being accessed. This can be an identifier that is created externally or one that is generated by ViziVault. Optional for \"STORE\" events (a new data point ID will be generated by ViziVault in this case); required for other events. subjectId String Unique identifier for the data subject whom this attribute belongs to Required for \"STORE\" events; optional for other events as it can be derived from the data point id. data Attribute The attribute being saved for a \"STORE\" or \"UPDATE\" event. For \"STORE\" events, data must contain attribute , and all other fields that would be used when storing data in the vault are optional. For \"UPDATE\" events, all fields of data other than value are ignored. In either case, if a value is supplied, it will be used by the rules engine but it will not be stored. timestamp Date The time at which the access occurred. If not specified, the current time will be assumed. Optional applicationId String Unique identifier for the application that was used to initiate this access. Required applicationUser String Identifier for the application user who initiated this access. Optional dataStoreName String Identifier for a database in which this event happened. Optional dataStoreServer String Identifier for a database server on which this event happened. Optional dataStoreEntityName String Identifier for a collection or table within a database in which this event happened. Optional location Geolocation The geographic country, subdivision, and/or city where this access was initiated from. Optional","title":"Body Parameters (Required)"},{"location":"api/reportonly/#example-payload","text":"{ \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"data\" : { \"attribute\" : \"SHIPPING_ADDRESS\" , \"value\" : { \"line_one\" : \"1 Hacker Way\" , \"city\" : \"Beverly Hills\" , \"state\" : \"CA\" , \"postal_code\" : \"90210\" }, \"tags\" : [ \"tag1\" , \"tag2\" ], \"regulations\" : [ \"COPPA\" , \"GDPR\" ], \"sensitivity\" : \"SENSITIVE\" }, \"timestamp\" : \"2021-01-01T00:00:00Z\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" , \"applicationUser\" : \"csmith97\" , \"location\" : { \"country\" : \"US\" , \"subdivision\" : \"NY\" , \"city\" : \"Albany\" } }","title":"Example payload"},{"location":"api/reportonly/#example-response","text":"On success, returns 200 OK and a summary of the accesses that were recorded, including newly-generated datapoint IDs for any newly-stored attributes that did not already have them. { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"attribute\" : \"SHIPPING_ADDRESS\" , \"subPoints\" : [ { \"attribute\" : \"SHIPPING_ADDRESS.line_one\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce626\" }, { \"attribute\" : \"SHIPPING_ADDRESS.city\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce627\" }, { \"attribute\" : \"SHIPPING_ADDRESS.state\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce628\" }, { \"attribute\" : \"SHIPPING_ADDRESS.postal_code\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce629\" } ] }","title":"Example response"},{"location":"api/reportonly/#error-responses","text":"Status code Error message Description 400 Event type is required The event type for an activity event was not specified. 400 Unrecognized event type The event type for an activity event was something other than READ , STORE , UPDATE , or DELETE . 400 Data point ID is required for events other than creation An activity event whose event type was not STORE had no datapoint ID specified. 409 Cannot create data point with ID, as there is already a point with that ID A STORE event had a data point ID specified, but the system already contained an attribute with that datapoint ID 409 Attribute given for datapoint ID does not match attribute of existing point with that ID An UPDATE event had an attribute definition specified that does not match the attribute being updated 409 Data subject ID given for datapoint ID does not match attribute of existing point with that ID An UPDATE event had a data subject id specified that does not match the attribute being updated 400 No such attribute You are attempting to report activity for data belonging to an attribute that does not exist. 422 Expected [type] for value of attribute [attribute] The value provided for the indicated attribute or sub-attribute does not match what is expected according to that attribute's schema . 422 Unknown sub-attribute [sub-attribute] A value provided for a structured attribute contains a sub-attribute that is not present in that attribute's schema . 400 Timestamp out of range A timestamp was provided for the event that is more than one day in the future. 400 Application ID is required The application ID was not specified. 403 The provided data could not be stored, as a rule disallows it A rule has been configured that prohibits writing some of the data that was reported as having been stored.","title":"Error responses"},{"location":"api/reportonly/#post-auditlogsbulk","text":"Identical to POST /auditlogs , but handles multiple events in one request.","title":"POST /auditlogs/bulk"},{"location":"api/reportonly/#body-parameters-required_1","text":"Name Type Description payload List<ExternalActivityEvent> List of accesses to externally-stored data","title":"Body Parameters (Required)"},{"location":"api/reportonly/#example-payload_1","text":"[ { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"data\" : { \"attribute\" : \"SHIPPING_ADDRESS\" , \"value\" : { \"line_one\" : \"1 Hacker Way\" , \"city\" : \"Beverly Hills\" , \"state\" : \"CA\" , \"postal_code\" : \"90210\" }, \"tags\" : [ \"tag1\" , \"tag2\" ], \"regulations\" : [ \"COPPA\" , \"GDPR\" ], \"sensitivity\" : \"SENSITIVE\" }, \"timestamp\" : \"2021-01-01T00:00:00Z\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" , \"applicationUser\" : \"csmith97\" , \"location\" : { \"country\" : \"US\" , \"subdivision\" : \"NY\" , \"city\" : \"Albany\" } }, { \"eventType\" : \"READ\" , \"subjectId\" : \"user65536\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"timestamp\" : \"2021-01-01T00:00:00Z\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" , \"applicationUser\" : \"csmith97\" , \"location\" : { \"country\" : \"US\" , \"subdivision\" : \"NY\" , \"city\" : \"Albany\" } }, { \"eventType\" : \"READ\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"applicationId\" : \"5eabb29fac3675476ae1ec48\" }, { \"eventType\" : \"STORE\" , \"subjectId\" : \"user01024\" , \"data\" : { \"attribute\" : \"BILLING_ADDRESS\" , }, \"applicationId\" : \"5eabb29fac3675476ae1ec48\" } ]","title":"Example payload"},{"location":"api/reportonly/#example-response_1","text":"On success, returns 200 OK and a summary of the accesses that were recorded, including newly-generated datapoint IDs for any newly-stored attributes that did not already have them. [ { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"attribute\" : \"SHIPPING_ADDRESS\" , \"subPoints\" : [ { \"attribute\" : \"SHIPPING_ADDRESS.line_one\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce626\" }, { \"attribute\" : \"SHIPPING_ADDRESS.city\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce627\" }, { \"attribute\" : \"SHIPPING_ADDRESS.state\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce628\" }, { \"attribute\" : \"SHIPPING_ADDRESS.postal_code\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce629\" } ] }, { \"eventType\" : \"READ\" , \"dataPointId\" : \"1fbeb66e-d460-43f5-b473-164b2c5ce526\" , \"subjectId\" : \"user65536\" , \"attribute\" : \"SHIPPING_ADDRESS\" }, { \"eventType\" : \"READ\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"subjectId\" : \"user01024\" , \"attribute\" : \"BILLING_ADDRESS\" }, { \"eventType\" : \"STORE\" , \"dataPointId\" : \"1fbeb66e-d460-43f6-b474-164b2c5ce527\" , \"subjectId\" : \"user01024\" , \"attribute\" : \"BILLING_ADDRESS\" , } ]","title":"Example response"},{"location":"api/reportonly/#error-responses_1","text":"Status code Error message Description 400 Event type is required The event type for an activity event was not specified. 400 Unrecognized event type The event type for an activity event was something other than READ , STORE , UPDATE , or DELETE . 400 Data point ID is required for events other than creation An activity event whose event type was not STORE had no datapoint ID specified. 409 Data point ID is in use A STORE event had a data point ID specified, but the system already contained an attribute with that datapoint ID that belonged to a different data subject ID and/or attribute definition 400 No such attribute You are attempting to report activity for data belonging to an attribute that does not exist. 400 Expected [type] for value of attribute [attribute] The value provided for the indicated attribute or sub-attribute does not match what is expected according to that attribute's schema . 400 Unknown sub-attribute [sub-attribute] A value provided for a structured attribute contains a sub-attribute that is not present in that attribute's schema . 400 Timestamp out of range A timestamp was provided for the event that is more than one day in the future. 400 Application ID is required The application ID was not specified. 403 The provided data could not be stored, as a rule disallows it A rule has been configured that prohibits writing some of the data that was reported as having been stored.","title":"Error responses"},{"location":"api/rules/","text":"Rules POST /rules Creates or edits a rule. If there is an existing rule in the system with the name of the provided rule, that rule will be updated; otherwise, a new rule will be created. Parameters Body Parameters (Required) Name Type Description payload Rule Description of new rule Example payload For more information on how to specify rules for rules, see Rules . { \"name\" : \"Sample rule\" , \"key\" : \"sampleRule\" \"type\" : \"data\" , \"constraint\" : { \"type\" : \"attribute\" , \"operator\" : \"any\" , \"attributes\" : [ \"ATTRIBUTE_1\" , \"ATTRIBUTE_2\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was stored\" } } Example response { \"data\" : \"Rule created\" } Error responses Status code Error message Description 400 Rule key is required No unique identifier for the rule was specified. 400 Cannot parse JSON of rule The rule provided is not valid JSON. 400 Rule constraint must be specified as an object The rule's constraint is missing or invalid. 400 Rule action must be specified as an object The rule's action is missing or invalid. 400 Constraint type must be specified as a string The rule provided contains constraints that do not have a type or whose type is not specified as a string. 400 [Attribute / Tag / Regulation / Geolocation] constraint operator must be specified as a string A constraint was specified that is missing a list operator or whose list operator is not a string. 400 Unsupported [attribute / tag / regulation / geolocation] list operator An invalid operator was specified for a list constraint. Attribute, tag, regulation, and geolocation constraints all support the list operators \"any\" and \"none\"; tag and regulation constraints additionally support \"all\". 400 Constraint [attribute / tag / regulation] list must be specified as an array An attribute, tag, or regulation constraint was specified whose list was missing or not an array. 400 Neither countries nor subdivisions specified for geolocation constraint A geolocation constraint was specified with no countries and no subdivisions. 400 Geolocation constraint [country / subdivision] list must be an array A geolocation constraint was specified with a country list or subdivision list in an invalid format. 400 Countries for geolocation constraint must be specified as ISO 3166-1 two-letter codes A geolocation constraint was specified that contains an invalid country code. ISO 3166-1 country codes consist of two letters, case-insensitive. 400 Subdivisions for geolocation constraint must be specified as ISO 3166-2 hyphenated codes A geolocation constraint was specified that contains an invalid subdivision code. ISO 3166-2 hyphenated codes consist of a two-letter country code, followed by a hyphen, followed by a two- or three-letter subdivision code, such as US-NY . 400 Entity value constraint attribute must be specified as a string An entity value constraint was specified with a missing or invalid attribute. 422 No such attribute An attribute specified for an entity value constraint or an attribute list constraint does not exist. 422 No such regulation A regulation specified for a regulation list constraint does not exist. 400 No value specified for entity value constraint An entity value constraint was specified with a missing value. 400 Entity-value attribute constraint predicate [predicate] is not supported. An invalid predicate was specified for an entity value constraint. For more information on what predicates are valid, see entity value attribute constraints . 400 Unrecognized constraint type An invalid constraint type was specified. For more information on what constraint types are valid, see Rules 402 Your current subscription does not support custom rules Your current license tier has limited features, and custom rules are not included GET /rules Retrieves data for all rules in the system. Returns a list of Rule objects. Parameters None Example response { \"data\" : [ { \"key\" : \"sampleRule1\" , \"name\" : \"First Sample Rule\" , \"type\" : \"data\" , \"constraint\" : { \"type\" : \"attribute\" , \"operator\" : \"any\" , \"attributes\" : [ \"ATTRIBUTE_1\" , \"ATTRIBUTE_2\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was stored\" }, \"executionOrder\" : 1 , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" }, { \"key\" : \"sampleRule2\" , \"name\" : \"Second Sample Rule\" , \"type\" : \"activity\" , \"constraint\" : { \"type\" : \"eventType\" , \"eventTypes\" : [ \"READ\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was accessed\" }, \"executionOrder\" : 1 , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } ] } GET /rules/{ruleName} Displays information about one rule. Returns a Rule object, or 404 Not Found if there is no rule with the specified name. Path Parameters Name Type Description ruleName String Name of the rule to describe Example response { \"data\" : { \"key\" : \"sampleRule\" , \"name\" : \"Sample rule\" , \"type\" : \"data\" , \"constraint\" : { \"type\" : \"attribute\" , \"operator\" : \"any\" , \"attributes\" : [ \"ATTRIBUTE_1\" , \"ATTRIBUTE_2\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was stored\" }, \"executionOrder\" : 1 , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } } Error responses Status code Error message Description 404 Rule not found The system does not contain a rule with the specified name. DELETE /rules/{ruleName} Deletes a specified rule, and untags it from all attributes. Returns 404 Not Found if there is no rule with the specified name. Path Parameters Name Type Description ruleName String Name of the rule to delete Example response { \"data\" : \"Rule deleted\" } Error responses Status code Error message Description 404 Rule not found The system does not contain a rule with the specified name.","title":"Rules"},{"location":"api/rules/#rules","text":"","title":"Rules"},{"location":"api/rules/#post-rules","text":"Creates or edits a rule. If there is an existing rule in the system with the name of the provided rule, that rule will be updated; otherwise, a new rule will be created.","title":"POST /rules"},{"location":"api/rules/#parameters","text":"","title":"Parameters"},{"location":"api/rules/#body-parameters-required","text":"Name Type Description payload Rule Description of new rule","title":"Body Parameters (Required)"},{"location":"api/rules/#example-payload","text":"For more information on how to specify rules for rules, see Rules . { \"name\" : \"Sample rule\" , \"key\" : \"sampleRule\" \"type\" : \"data\" , \"constraint\" : { \"type\" : \"attribute\" , \"operator\" : \"any\" , \"attributes\" : [ \"ATTRIBUTE_1\" , \"ATTRIBUTE_2\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was stored\" } }","title":"Example payload"},{"location":"api/rules/#example-response","text":"{ \"data\" : \"Rule created\" }","title":"Example response"},{"location":"api/rules/#error-responses","text":"Status code Error message Description 400 Rule key is required No unique identifier for the rule was specified. 400 Cannot parse JSON of rule The rule provided is not valid JSON. 400 Rule constraint must be specified as an object The rule's constraint is missing or invalid. 400 Rule action must be specified as an object The rule's action is missing or invalid. 400 Constraint type must be specified as a string The rule provided contains constraints that do not have a type or whose type is not specified as a string. 400 [Attribute / Tag / Regulation / Geolocation] constraint operator must be specified as a string A constraint was specified that is missing a list operator or whose list operator is not a string. 400 Unsupported [attribute / tag / regulation / geolocation] list operator An invalid operator was specified for a list constraint. Attribute, tag, regulation, and geolocation constraints all support the list operators \"any\" and \"none\"; tag and regulation constraints additionally support \"all\". 400 Constraint [attribute / tag / regulation] list must be specified as an array An attribute, tag, or regulation constraint was specified whose list was missing or not an array. 400 Neither countries nor subdivisions specified for geolocation constraint A geolocation constraint was specified with no countries and no subdivisions. 400 Geolocation constraint [country / subdivision] list must be an array A geolocation constraint was specified with a country list or subdivision list in an invalid format. 400 Countries for geolocation constraint must be specified as ISO 3166-1 two-letter codes A geolocation constraint was specified that contains an invalid country code. ISO 3166-1 country codes consist of two letters, case-insensitive. 400 Subdivisions for geolocation constraint must be specified as ISO 3166-2 hyphenated codes A geolocation constraint was specified that contains an invalid subdivision code. ISO 3166-2 hyphenated codes consist of a two-letter country code, followed by a hyphen, followed by a two- or three-letter subdivision code, such as US-NY . 400 Entity value constraint attribute must be specified as a string An entity value constraint was specified with a missing or invalid attribute. 422 No such attribute An attribute specified for an entity value constraint or an attribute list constraint does not exist. 422 No such regulation A regulation specified for a regulation list constraint does not exist. 400 No value specified for entity value constraint An entity value constraint was specified with a missing value. 400 Entity-value attribute constraint predicate [predicate] is not supported. An invalid predicate was specified for an entity value constraint. For more information on what predicates are valid, see entity value attribute constraints . 400 Unrecognized constraint type An invalid constraint type was specified. For more information on what constraint types are valid, see Rules 402 Your current subscription does not support custom rules Your current license tier has limited features, and custom rules are not included","title":"Error responses"},{"location":"api/rules/#get-rules","text":"Retrieves data for all rules in the system. Returns a list of Rule objects.","title":"GET /rules"},{"location":"api/rules/#parameters_1","text":"None","title":"Parameters"},{"location":"api/rules/#example-response_1","text":"{ \"data\" : [ { \"key\" : \"sampleRule1\" , \"name\" : \"First Sample Rule\" , \"type\" : \"data\" , \"constraint\" : { \"type\" : \"attribute\" , \"operator\" : \"any\" , \"attributes\" : [ \"ATTRIBUTE_1\" , \"ATTRIBUTE_2\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was stored\" }, \"executionOrder\" : 1 , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" }, { \"key\" : \"sampleRule2\" , \"name\" : \"Second Sample Rule\" , \"type\" : \"activity\" , \"constraint\" : { \"type\" : \"eventType\" , \"eventTypes\" : [ \"READ\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was accessed\" }, \"executionOrder\" : 1 , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } ] }","title":"Example response"},{"location":"api/rules/#get-rulesrulename","text":"Displays information about one rule. Returns a Rule object, or 404 Not Found if there is no rule with the specified name.","title":"GET /rules/{ruleName}"},{"location":"api/rules/#path-parameters","text":"Name Type Description ruleName String Name of the rule to describe","title":"Path Parameters"},{"location":"api/rules/#example-response_2","text":"{ \"data\" : { \"key\" : \"sampleRule\" , \"name\" : \"Sample rule\" , \"type\" : \"data\" , \"constraint\" : { \"type\" : \"attribute\" , \"operator\" : \"any\" , \"attributes\" : [ \"ATTRIBUTE_1\" , \"ATTRIBUTE_2\" ] }, \"action\" : { \"type\" : \"alert\" , \"alertLevel\" : \"NORMAL\" , \"message\" : \"A data point was stored\" }, \"executionOrder\" : 1 , \"createdDate\" : \"2020-01-01T04:00:00Z\" , \"modifiedDate\" : \"2020-09-25T01:10:02Z\" } }","title":"Example response"},{"location":"api/rules/#error-responses_1","text":"Status code Error message Description 404 Rule not found The system does not contain a rule with the specified name.","title":"Error responses"},{"location":"api/rules/#delete-rulesrulename","text":"Deletes a specified rule, and untags it from all attributes. Returns 404 Not Found if there is no rule with the specified name.","title":"DELETE /rules/{ruleName}"},{"location":"api/rules/#path-parameters_1","text":"Name Type Description ruleName String Name of the rule to delete","title":"Path Parameters"},{"location":"api/rules/#example-response_3","text":"{ \"data\" : \"Rule deleted\" }","title":"Example response"},{"location":"api/rules/#error-responses_2","text":"Status code Error message Description 404 Rule not found The system does not contain a rule with the specified name.","title":"Error responses"},{"location":"api/tags/","text":"Tags POST /tags Creates or edits an tag. If there is an existing tag in the system with the name of the provided tag, that tag will be updated; otherwise, a new tag will be created. Parameters Body Parameters (Required) Name Type Description payload Tag Description of new tag Example payload { \"name\" : \"SampleTag\" } Example response On success, returns 201 Created and a description of the updated tag. { \"data\" : { \"name\" : \"SampleTag\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" } } GET /tags Retrieves data for all tags in the system. Returns a list of Tag objects. Parameters None Example response { \"data\" : [ { \"name\" : \"SampleTag1\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" }, { \"name\" : \"SampleTag2\" , \"createdDate\" : \"2020-10-03T02:18:54Z\" , \"modifiedDate\" : \"2020-10-24T18:28:29Z\" } ] } GET /tags/{tagName} Displays information about one tag. Returns an Tag object. Path Parameters Name Type Description tagName String Name of the tag to describe Example response { \"data\" : { \"name\" : \"SampleTag\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , } } Error responses Status code Error message Description 404 No such tag The system does not contain a tag with the specified name. DELETE /tags/{tagName} Deletes a tag from the system, and removes it from all attribute definitions, data subjects, and attributes tagged with it. Path Parameters Name Type Description tagName String Name of the tag to describe Example response { \"data\" : \"Successfully deleted tag\" } Error responses Status code Error message Description 404 No such tag The system does not contain a tag with the specified name. 409 Cannot delete tag, because it is referenced by rule There are one or more rules that reference this tag.","title":"Tags"},{"location":"api/tags/#tags","text":"","title":"Tags"},{"location":"api/tags/#post-tags","text":"Creates or edits an tag. If there is an existing tag in the system with the name of the provided tag, that tag will be updated; otherwise, a new tag will be created.","title":"POST /tags"},{"location":"api/tags/#parameters","text":"","title":"Parameters"},{"location":"api/tags/#body-parameters-required","text":"Name Type Description payload Tag Description of new tag","title":"Body Parameters (Required)"},{"location":"api/tags/#example-payload","text":"{ \"name\" : \"SampleTag\" }","title":"Example payload"},{"location":"api/tags/#example-response","text":"On success, returns 201 Created and a description of the updated tag. { \"data\" : { \"name\" : \"SampleTag\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" } }","title":"Example response"},{"location":"api/tags/#get-tags","text":"Retrieves data for all tags in the system. Returns a list of Tag objects.","title":"GET /tags"},{"location":"api/tags/#parameters_1","text":"None","title":"Parameters"},{"location":"api/tags/#example-response_1","text":"{ \"data\" : [ { \"name\" : \"SampleTag1\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" }, { \"name\" : \"SampleTag2\" , \"createdDate\" : \"2020-10-03T02:18:54Z\" , \"modifiedDate\" : \"2020-10-24T18:28:29Z\" } ] }","title":"Example response"},{"location":"api/tags/#get-tagstagname","text":"Displays information about one tag. Returns an Tag object.","title":"GET /tags/{tagName}"},{"location":"api/tags/#path-parameters","text":"Name Type Description tagName String Name of the tag to describe","title":"Path Parameters"},{"location":"api/tags/#example-response_2","text":"{ \"data\" : { \"name\" : \"SampleTag\" , \"createdDate\" : \"2020-09-03T02:18:54Z\" , \"modifiedDate\" : \"2020-09-24T18:28:29Z\" , } }","title":"Example response"},{"location":"api/tags/#error-responses","text":"Status code Error message Description 404 No such tag The system does not contain a tag with the specified name.","title":"Error responses"},{"location":"api/tags/#delete-tagstagname","text":"Deletes a tag from the system, and removes it from all attribute definitions, data subjects, and attributes tagged with it.","title":"DELETE /tags/{tagName}"},{"location":"api/tags/#path-parameters_1","text":"Name Type Description tagName String Name of the tag to describe","title":"Path Parameters"},{"location":"api/tags/#example-response_3","text":"{ \"data\" : \"Successfully deleted tag\" }","title":"Example response"},{"location":"api/tags/#error-responses_1","text":"Status code Error message Description 404 No such tag The system does not contain a tag with the specified name. 409 Cannot delete tag, because it is referenced by rule There are one or more rules that reference this tag.","title":"Error responses"},{"location":"glossary/attribute-definition/","text":"Attribute Defintions Attribute definitions are how the ViziVault ecosystem organizes your data. Every attribute in the system consists of a data subject id, which represents who the data is about; a value, which is the data being stored; and an attribute key, which specifies what attribute definition governs the structure of the data. For example, in an online retail application, there would be an attribute definition for shipping addresses, an attribute definition for billing addresses, an attribute definition for credit card information, and so on. Definition There are several forms of metadata associated with attributes, as follows: Name Type Description key String An unambiguous identifier for this attribute. Only alphanumeric characters and underscores may appear in attribute keys. name String A human-readable identifier for this attribute. entityTypes Array<String> A list of entity types that this attribute is applicable to. tags Array<String> A list of tags that should be applied to all attributes belonging to this attribute definition. hint String An example value that this attribute could take. immutable boolean Whether this is a pre-loaded attribute definition provided by ViziVault that cannot be modified through the web interface. indexed boolean Whether values of this attribute should be indexed to allow searching on it. For more information, read the Search tutorial . createdDate String An ISO 8601 representation of the timestamp when the attribute definition was created. modifiedDate String An ISO 8601 representation of the timestamp when the attribute definition was most recently modified. schema Attribute schema A representation of the structure of data belonging to this attribute is expected to have, including any sub-attributes, and whether its data is textual, numeric, or other formats. Read the Attribute Schemas tutorial for more information. repeatable boolean Whether a data subject should be able to have multiple values for this attribute. regulations Array<String> A list of regulation keys , each representing a regulation that will be applied to all attributes belonging to this attribute definition. Examples An example attribute definition representing a data subject's billing address: { \"key\" : \"BILLING_ADDRESS\" , \"name\" : \"Billing address\" , \"entityTypes\" [ \"datasubject\" ], \"tags\" : [ \"geographic_location\" , \"financial\" ], \"hint\" : \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\", country: \\\"USA\\\"}\" , \"schema\" : { \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" }, \"repeatable\" : false , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Attribute Definition"},{"location":"glossary/attribute-definition/#attribute-defintions","text":"Attribute definitions are how the ViziVault ecosystem organizes your data. Every attribute in the system consists of a data subject id, which represents who the data is about; a value, which is the data being stored; and an attribute key, which specifies what attribute definition governs the structure of the data. For example, in an online retail application, there would be an attribute definition for shipping addresses, an attribute definition for billing addresses, an attribute definition for credit card information, and so on.","title":"Attribute Defintions"},{"location":"glossary/attribute-definition/#definition","text":"There are several forms of metadata associated with attributes, as follows: Name Type Description key String An unambiguous identifier for this attribute. Only alphanumeric characters and underscores may appear in attribute keys. name String A human-readable identifier for this attribute. entityTypes Array<String> A list of entity types that this attribute is applicable to. tags Array<String> A list of tags that should be applied to all attributes belonging to this attribute definition. hint String An example value that this attribute could take. immutable boolean Whether this is a pre-loaded attribute definition provided by ViziVault that cannot be modified through the web interface. indexed boolean Whether values of this attribute should be indexed to allow searching on it. For more information, read the Search tutorial . createdDate String An ISO 8601 representation of the timestamp when the attribute definition was created. modifiedDate String An ISO 8601 representation of the timestamp when the attribute definition was most recently modified. schema Attribute schema A representation of the structure of data belonging to this attribute is expected to have, including any sub-attributes, and whether its data is textual, numeric, or other formats. Read the Attribute Schemas tutorial for more information. repeatable boolean Whether a data subject should be able to have multiple values for this attribute. regulations Array<String> A list of regulation keys , each representing a regulation that will be applied to all attributes belonging to this attribute definition.","title":"Definition"},{"location":"glossary/attribute-definition/#examples","text":"An example attribute definition representing a data subject's billing address: { \"key\" : \"BILLING_ADDRESS\" , \"name\" : \"Billing address\" , \"entityTypes\" [ \"datasubject\" ], \"tags\" : [ \"geographic_location\" , \"financial\" ], \"hint\" : \"{ line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\", country: \\\"USA\\\"}\" , \"schema\" : { \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" }, \"repeatable\" : false , \"immutable\" : false , \"indexed\" : false , \"regulations\" : [ \"GDPR\" , \"CCPA\" ], \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Examples"},{"location":"glossary/attribute/","text":"Attribute Attributes are the form in which data in ViziVault is stored. Every attribute represents some piece of information about an entity in the system. The attribute defintion that an attribute belongs to specifies important metadata about the nature of the data. Definition The anatomy of a Attribute is as follows: Name Type Description Included when storing dataPointId String A globally-unique identifier for this attribute. entityId String The identifier of the enitity this attribute belongs to. attribute String The attribute key, which specifies the attribute definition that this attribute belongs to. X tags Array<String> A list of tags applied to this attribute, including any inherited from its attribute definition or its entity. X sensitivity String How sensitive this attribute is. Possible values are NORMAL , PERSONAL , SENSITIVE , and CONFIDENTIAL . X value (varies) The actual value of this attribute. What type the value is depends on the schema of the attribute definition. X regulations Array<String> A list of regulations that are applicable to this datapoint. These can be specified manually, or they can be drawn from the regulations associated with this datapoint's attribute definition . Additionally, rules can be specified to automatically populate the list of applicable regulations based on more sophisticated criteria. X reportOnly Boolean If true, indicates that the ViziVault system is being used to report on this data point but not to store it. This means that it will not be possible to read the value of this datapoint, and that providing the value while storing the attribute is optional. X createdDate String An ISO 8601 representation of the timestamp when the attribute was created. modifiedDate String An ISO 8601 representation of the timestamp when the attribute was most recently modified.","title":"Attribute"},{"location":"glossary/attribute/#attribute","text":"Attributes are the form in which data in ViziVault is stored. Every attribute represents some piece of information about an entity in the system. The attribute defintion that an attribute belongs to specifies important metadata about the nature of the data.","title":"Attribute"},{"location":"glossary/attribute/#definition","text":"The anatomy of a Attribute is as follows: Name Type Description Included when storing dataPointId String A globally-unique identifier for this attribute. entityId String The identifier of the enitity this attribute belongs to. attribute String The attribute key, which specifies the attribute definition that this attribute belongs to. X tags Array<String> A list of tags applied to this attribute, including any inherited from its attribute definition or its entity. X sensitivity String How sensitive this attribute is. Possible values are NORMAL , PERSONAL , SENSITIVE , and CONFIDENTIAL . X value (varies) The actual value of this attribute. What type the value is depends on the schema of the attribute definition. X regulations Array<String> A list of regulations that are applicable to this datapoint. These can be specified manually, or they can be drawn from the regulations associated with this datapoint's attribute definition . Additionally, rules can be specified to automatically populate the list of applicable regulations based on more sophisticated criteria. X reportOnly Boolean If true, indicates that the ViziVault system is being used to report on this data point but not to store it. This means that it will not be possible to read the value of this datapoint, and that providing the value while storing the attribute is optional. X createdDate String An ISO 8601 representation of the timestamp when the attribute was created. modifiedDate String An ISO 8601 representation of the timestamp when the attribute was most recently modified.","title":"Definition"},{"location":"glossary/datasubject/","text":"Entity An entity object represents a person (that is, a data subject), organization, or object that data is stored about in the vault. Every attribute has an associated entity. Definition The metadata associated with an entity is as follows: Name Type Description id String A unique identifier for this entity. type String The type of this entity. tags Array<String> A list of tags that should be automatically applied to all attributes for this entity. legalHold boolean Indicates whether this entity is under a legal hold. If true , all destructive actions (deleting or overwriting data) are prevented. created String An ISO 8601 representation of the timestamp when the entity was created. modified String An ISO 8601 representation of the timestamp when the entity (or the associated data) was most recently modified. Examples An example entity definition: { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [ \"ExampleTag\" ], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , }","title":"Entity"},{"location":"glossary/datasubject/#entity","text":"An entity object represents a person (that is, a data subject), organization, or object that data is stored about in the vault. Every attribute has an associated entity.","title":"Entity"},{"location":"glossary/datasubject/#definition","text":"The metadata associated with an entity is as follows: Name Type Description id String A unique identifier for this entity. type String The type of this entity. tags Array<String> A list of tags that should be automatically applied to all attributes for this entity. legalHold boolean Indicates whether this entity is under a legal hold. If true , all destructive actions (deleting or overwriting data) are prevented. created String An ISO 8601 representation of the timestamp when the entity was created. modified String An ISO 8601 representation of the timestamp when the entity (or the associated data) was most recently modified.","title":"Definition"},{"location":"glossary/datasubject/#examples","text":"An example entity definition: { \"id\" : \"user0001\" , \"type\" : \"datasubject\" , \"tags\" : [ \"ExampleTag\" ], \"legalHold\" : false , \"created\" : \"2020-09-03T02:18:54Z\" , \"updated\" : \"2020-09-24T18:28:29Z\" , }","title":"Examples"},{"location":"glossary/entity-type/","text":"Entity Type An entity type object represents a category of person, organization, or object about which data can be stored. For use cases focusing solely on compliance with personal privacy regulations such as GDPR or CCPA, the built-in datasubject entity type should be sufficient, but in more complex situations it may be useful to create additional entity types for concepts such as employees, companies, or products. Definition The metadata associated with an entity type is as follows: Name Type Description key String An unambiguous identifier for this entity type. Only alphanumeric characters and underscores may appear in entity type keys. name String A human-readable identifier for this entity type. description String An explanation of what this entity type represents. Examples An example entity type definition: { \"key\" : \"supplier\" , \"name\" : \"Product supplier\" , \"description\" : \"A company from which products are purchased\" }","title":"Entity Type"},{"location":"glossary/entity-type/#entity-type","text":"An entity type object represents a category of person, organization, or object about which data can be stored. For use cases focusing solely on compliance with personal privacy regulations such as GDPR or CCPA, the built-in datasubject entity type should be sufficient, but in more complex situations it may be useful to create additional entity types for concepts such as employees, companies, or products.","title":"Entity Type"},{"location":"glossary/entity-type/#definition","text":"The metadata associated with an entity type is as follows: Name Type Description key String An unambiguous identifier for this entity type. Only alphanumeric characters and underscores may appear in entity type keys. name String A human-readable identifier for this entity type. description String An explanation of what this entity type represents.","title":"Definition"},{"location":"glossary/entity-type/#examples","text":"An example entity type definition: { \"key\" : \"supplier\" , \"name\" : \"Product supplier\" , \"description\" : \"A company from which products are purchased\" }","title":"Examples"},{"location":"glossary/regulation/","text":"Regulation A regulation object represents a governmental regulation that impacts how you can use the data in your vault. Each data point can have a number of regulations associated with it, which makes it easier to ensure your use of the data is compliant. You can tag data with regulations when entering it into the system, or specify rules that the system will use to automatically tag regulations for you. Definition There are several forms of metadata associated with regulations, as follows: Name Type Description key String An unambiguous identifier for this regulation. Usually, this is an acronym or abbreviation. name String A human-readable identifier for this regulation. If the regulation key is an acronym, this should spell it out. url String The URL of a webpage containing more information about this regulation. createdDate String An ISO 8601 representation of the timestamp when the regulation was created. modifiedDate String An ISO 8601 representation of the timestamp when the regulation was most recently modified. Examples An example regulation definition representing the Children's Online Privacy Protection Act (COPPA): { \"key\" : \"COPPA\" , \"name\" : \"Children's Online Privacy Protection Act\" , \"url\" : \"http://www.ftc.gov/ogc/coppa1.htm\" , \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Regulation"},{"location":"glossary/regulation/#regulation","text":"A regulation object represents a governmental regulation that impacts how you can use the data in your vault. Each data point can have a number of regulations associated with it, which makes it easier to ensure your use of the data is compliant. You can tag data with regulations when entering it into the system, or specify rules that the system will use to automatically tag regulations for you.","title":"Regulation"},{"location":"glossary/regulation/#definition","text":"There are several forms of metadata associated with regulations, as follows: Name Type Description key String An unambiguous identifier for this regulation. Usually, this is an acronym or abbreviation. name String A human-readable identifier for this regulation. If the regulation key is an acronym, this should spell it out. url String The URL of a webpage containing more information about this regulation. createdDate String An ISO 8601 representation of the timestamp when the regulation was created. modifiedDate String An ISO 8601 representation of the timestamp when the regulation was most recently modified.","title":"Definition"},{"location":"glossary/regulation/#examples","text":"An example regulation definition representing the Children's Online Privacy Protection Act (COPPA): { \"key\" : \"COPPA\" , \"name\" : \"Children's Online Privacy Protection Act\" , \"url\" : \"http://www.ftc.gov/ogc/coppa1.htm\" , \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Examples"},{"location":"glossary/rule/","text":"Rule Rules allow you to specify custom behavior based on the data that is stored in your system. You can mark data points with tags and regulations, receive notifications about what is being stored, or prevent the data from being persisted in the vault. Definition There are several forms of metadata associated with regulations, as follows: Name Type Description key String A unique identifier for this rule. name String A human-readable title for this rule. type String Either \"activity\" or \"data\"; determines what context this rule is applicable in. constraint Rule constraint The criteria that determine what data this rule applies to. action Rule action The action to take on data that meets the condition. executionOrder int Optional. Determines when this rule should be executed relative to other rules of the same action type. Rules with lower numbers will be executed first. createdDate String An ISO 8601 representation of the timestamp when the rule was created. modifiedDate String An ISO 8601 representation of the timestamp when the rule was most recently modified. Examples An example rule that marks data as governed by the Children's Online Privacy Protection Act (COPPA): { \"key\" : \"TagCoppa\" , \"name\" : \"COPPA tagging rule\" , \"type\" : \"data\" , \"constraint\" : { \"type\" : \"all\" , \"value\" : [ { \"type\" : \"user\" , \"value\" : { \"attribute\" : \"AGE_YEARS\" , \"predicate\" : \"lt\" , \"value\" : 13 } }, { \"type\" : \"user\" , \"value\" : { \"attribute\" : \"COUNTRY_OF_RESIDENCE\" , \"predicate\" : \"eq\" , \"value\" : \"US\" } } ] }, \"action\" : { \"type\" : \"regulation\" , \"regulation\" : \"COPPA\" }, \"executionOrder\" : 0 , \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Rule"},{"location":"glossary/rule/#rule","text":"Rules allow you to specify custom behavior based on the data that is stored in your system. You can mark data points with tags and regulations, receive notifications about what is being stored, or prevent the data from being persisted in the vault.","title":"Rule"},{"location":"glossary/rule/#definition","text":"There are several forms of metadata associated with regulations, as follows: Name Type Description key String A unique identifier for this rule. name String A human-readable title for this rule. type String Either \"activity\" or \"data\"; determines what context this rule is applicable in. constraint Rule constraint The criteria that determine what data this rule applies to. action Rule action The action to take on data that meets the condition. executionOrder int Optional. Determines when this rule should be executed relative to other rules of the same action type. Rules with lower numbers will be executed first. createdDate String An ISO 8601 representation of the timestamp when the rule was created. modifiedDate String An ISO 8601 representation of the timestamp when the rule was most recently modified.","title":"Definition"},{"location":"glossary/rule/#examples","text":"An example rule that marks data as governed by the Children's Online Privacy Protection Act (COPPA): { \"key\" : \"TagCoppa\" , \"name\" : \"COPPA tagging rule\" , \"type\" : \"data\" , \"constraint\" : { \"type\" : \"all\" , \"value\" : [ { \"type\" : \"user\" , \"value\" : { \"attribute\" : \"AGE_YEARS\" , \"predicate\" : \"lt\" , \"value\" : 13 } }, { \"type\" : \"user\" , \"value\" : { \"attribute\" : \"COUNTRY_OF_RESIDENCE\" , \"predicate\" : \"eq\" , \"value\" : \"US\" } } ] }, \"action\" : { \"type\" : \"regulation\" , \"regulation\" : \"COPPA\" }, \"executionOrder\" : 0 , \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Examples"},{"location":"glossary/storage-request/","text":"Storage Request A storage request is the format in which data is entered into the vault. Definition Name Type Description origin String The IP address of the system that obtained this data. This is used to determine the geographical jurisdiction the data falls under. entityType String Optional. The type of the entity that this data belongs to. If this field is omitted, and the entity that this data belongs to does not already exist in the system, the entity will be created as a data subject. Specifying an entity type here will override this default behavior and instead create a new entity of the provided type. data Array< Attribute > List of attributes to store.","title":"Storage Request"},{"location":"glossary/storage-request/#storage-request","text":"A storage request is the format in which data is entered into the vault.","title":"Storage Request"},{"location":"glossary/storage-request/#definition","text":"Name Type Description origin String The IP address of the system that obtained this data. This is used to determine the geographical jurisdiction the data falls under. entityType String Optional. The type of the entity that this data belongs to. If this field is omitted, and the entity that this data belongs to does not already exist in the system, the entity will be created as a data subject. Specifying an entity type here will override this default behavior and instead create a new entity of the provided type. data Array< Attribute > List of attributes to store.","title":"Definition"},{"location":"glossary/tag/","text":"Tag Tags can be used to specify additional metadata about data in the vault. This can be used to determine what regulations should apply to data or for other business-specific purposes. Data subjects and attribute definitions can each have tags associated with them; these tags will be propagated onto all associated attributes. Definition The metadata associated with a tag is as follows: Name Type Description name String An identifier for this tag. createdDate String An ISO 8601 representation of the timestamp when the tag was created. modifiedDate String An ISO 8601 representation of the timestamp when the tag was most recently modified. Examples An example tag definition: { \"key\" : \"FINANCIAL\" , \"name\" : \"Financial data\" , \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Tag"},{"location":"glossary/tag/#tag","text":"Tags can be used to specify additional metadata about data in the vault. This can be used to determine what regulations should apply to data or for other business-specific purposes. Data subjects and attribute definitions can each have tags associated with them; these tags will be propagated onto all associated attributes.","title":"Tag"},{"location":"glossary/tag/#definition","text":"The metadata associated with a tag is as follows: Name Type Description name String An identifier for this tag. createdDate String An ISO 8601 representation of the timestamp when the tag was created. modifiedDate String An ISO 8601 representation of the timestamp when the tag was most recently modified.","title":"Definition"},{"location":"glossary/tag/#examples","text":"An example tag definition: { \"key\" : \"FINANCIAL\" , \"name\" : \"Financial data\" , \"createdDate\" : \"2020-01-01T02:18:54Z\" , \"modifiedDate\" : \"2020-01-01T02:18:54Z\" }","title":"Examples"},{"location":"tutorials/alerts/","text":"Scheduled Alerts The ViziVault Enterprise web interface can be used to create scheduled alerts that will periodically calculate analytics on your data and notify you if something unusual is detected. Viewing scheduled alerts The Alerts page shows a list of schedulded alerts that are currently active. You can edit or delete a scheduled alert by clicking the pencil or trash can icon next to it. Creating scheduled alerts To create a new alert, click the plus icon at the top of the Alerts page. This will open a prompt allowing you to enter details about the alert you wish to create. Name A human-readable name to show at a glance what this alert is measuring. Alert type What type of alert this will be. See Types of Alerts for more information; many alert types have specific parameters that you will also need to provide. Frequency How often to calculate the analytics for this alert. Options are once per day, once per week, once per month, once per quarter, and once per year. Alert Level What level of alert this should be considered: informational, warning, danger, neutral, or success. Minimum value and maximum value These parameters allow you to control the threshold at which a notification will be generated for this alert. If the value calculated for the metric falls below a provided minimum, or above a provided maximum, no notification will be sent. Types of alerts Data subjects percent change This alert measures the change in total number of data subjects whom the system has data for from one period (day, week, month, quarter, or year) to the next. At the end of each period, if the percent change in data subjects when compared to the end of the previous period falls in the provided range (or if no range is speecified), this alert will send a notification. For example, if you expect the number of data subjects in your vault to grow by at least 1% each month, and having less growth than this is cause for concern, you could create a data-subjects-percent-change alert with a maximum value of 1, an alert level of \"warning\", and a monthly frequency. This would then send a warning notification each month if the total number of data subjects in the system is less than 1% higher than it was the previous month. Total activity volume This alert measures how much vault activity is happening; that is, how many data points are being read, written, and/or deleted by API calls to the vault server. At the end of each period, if the total amount of activity recorded since the start of the period falls in the provided range, this alert will send a notification. Total activity percent change This alert measures the change in activity from one period to the next. It measures activity volume, as the activity volume alert does; however, rather than comparing the volume to an absolute number, it compares the volume to the previous period's volume, and sends a notification if that percent change is in a specified range. Activity volume and activity percent change These two alerts work the same way as total activity volume and total activity percent change, but allow specifying a subset of activity to alert on by specifying an activity query. Only activity that matches the provided query will be included. Query results This alert measures how much data is stored in the vault that matches a specified query.","title":"Scheduled Alerts"},{"location":"tutorials/alerts/#scheduled-alerts","text":"The ViziVault Enterprise web interface can be used to create scheduled alerts that will periodically calculate analytics on your data and notify you if something unusual is detected.","title":"Scheduled Alerts"},{"location":"tutorials/alerts/#viewing-scheduled-alerts","text":"The Alerts page shows a list of schedulded alerts that are currently active. You can edit or delete a scheduled alert by clicking the pencil or trash can icon next to it.","title":"Viewing scheduled alerts"},{"location":"tutorials/alerts/#creating-scheduled-alerts","text":"To create a new alert, click the plus icon at the top of the Alerts page. This will open a prompt allowing you to enter details about the alert you wish to create.","title":"Creating scheduled alerts"},{"location":"tutorials/alerts/#name","text":"A human-readable name to show at a glance what this alert is measuring.","title":"Name"},{"location":"tutorials/alerts/#alert-type","text":"What type of alert this will be. See Types of Alerts for more information; many alert types have specific parameters that you will also need to provide.","title":"Alert type"},{"location":"tutorials/alerts/#frequency","text":"How often to calculate the analytics for this alert. Options are once per day, once per week, once per month, once per quarter, and once per year.","title":"Frequency"},{"location":"tutorials/alerts/#alert-level","text":"What level of alert this should be considered: informational, warning, danger, neutral, or success.","title":"Alert Level"},{"location":"tutorials/alerts/#minimum-value-and-maximum-value","text":"These parameters allow you to control the threshold at which a notification will be generated for this alert. If the value calculated for the metric falls below a provided minimum, or above a provided maximum, no notification will be sent.","title":"Minimum value and maximum value"},{"location":"tutorials/alerts/#types-of-alerts","text":"","title":"Types of alerts"},{"location":"tutorials/alerts/#data-subjects-percent-change","text":"This alert measures the change in total number of data subjects whom the system has data for from one period (day, week, month, quarter, or year) to the next. At the end of each period, if the percent change in data subjects when compared to the end of the previous period falls in the provided range (or if no range is speecified), this alert will send a notification. For example, if you expect the number of data subjects in your vault to grow by at least 1% each month, and having less growth than this is cause for concern, you could create a data-subjects-percent-change alert with a maximum value of 1, an alert level of \"warning\", and a monthly frequency. This would then send a warning notification each month if the total number of data subjects in the system is less than 1% higher than it was the previous month.","title":"Data subjects percent change"},{"location":"tutorials/alerts/#total-activity-volume","text":"This alert measures how much vault activity is happening; that is, how many data points are being read, written, and/or deleted by API calls to the vault server. At the end of each period, if the total amount of activity recorded since the start of the period falls in the provided range, this alert will send a notification.","title":"Total activity volume"},{"location":"tutorials/alerts/#total-activity-percent-change","text":"This alert measures the change in activity from one period to the next. It measures activity volume, as the activity volume alert does; however, rather than comparing the volume to an absolute number, it compares the volume to the previous period's volume, and sends a notification if that percent change is in a specified range.","title":"Total activity percent change"},{"location":"tutorials/alerts/#activity-volume-and-activity-percent-change","text":"These two alerts work the same way as total activity volume and total activity percent change, but allow specifying a subset of activity to alert on by specifying an activity query. Only activity that matches the provided query will be included.","title":"Activity volume and activity percent change"},{"location":"tutorials/alerts/#query-results","text":"This alert measures how much data is stored in the vault that matches a specified query.","title":"Query results"},{"location":"tutorials/attribute-schemas/","text":"Attribute Schemas When creating a new attribute definition, it is important to specify what form the attribute's values will take: whether it is textual, numeric, or something more structured. An attribute definition can have a primitive schema, meaning that the associated data consists of a single piece of unstructured information, or alternatively a structured schema, breaking up its data into multiple sub-attributes. The supported primitive schemas are as follows: string : For textual data, up to one megabyte in length. int : For data that can be expressed as an integer. float : For data that can be expressed as a floating-point number. boolean : For data that takes one of the two values \"true\" or \"false\". file : For large data such as long text files or base64-encoded representations of image files. Structured schemas take the form of JSON objects, which map sub-attribute keys to further attribute schemas. Thesse nested schemas can likewise be either primitive or structured. In this way, arbitrarily complex structures can be represented within a single attribute. To mark that a sub-attribute should be able to take on multiple values within a single data point, or that the value of a sub-attribute should be a list, enclose the name of the sub-attribute in square brackets. Examples An example schema that could be used to store a person's name: { \"firstName\" : \"string\" , \"[middleName]\" : \"string\" , // By enclosing the sub-attribute key in square brackets, // we mark that this sub-attribute's value is a list. // This allows recording that a person has multiple middle names. \"lastName\" : \"string\" } A valid value for an attribute with this schema would be: { \"firstName\" : \"John\" , \"middleName\" : [ // Don't include the square brackets in the sub-attribute key when sending the attribute value! \"Ronald\" , \"Reuel\" ], \"lastName\" : \"Tolkien\" } An example schema that could be used to store a person's credit card information: { \"creditCardNumber\" : \"string\" , \"CVV\" : \"string\" , \"expirationDate\" : { \"month\" : \"int\" , \"year\" : \"int\" } } A valid value for an attribute with this schema would be: { \"creditCardNumber\" : \"0000 1234 5678 9999\" , \"CVV\" : \"321\" , \"expirationDate\" : { \"month\" : 2 , \"year\" : 2025 } }","title":"Attribute Schemas"},{"location":"tutorials/attribute-schemas/#attribute-schemas","text":"When creating a new attribute definition, it is important to specify what form the attribute's values will take: whether it is textual, numeric, or something more structured. An attribute definition can have a primitive schema, meaning that the associated data consists of a single piece of unstructured information, or alternatively a structured schema, breaking up its data into multiple sub-attributes. The supported primitive schemas are as follows: string : For textual data, up to one megabyte in length. int : For data that can be expressed as an integer. float : For data that can be expressed as a floating-point number. boolean : For data that takes one of the two values \"true\" or \"false\". file : For large data such as long text files or base64-encoded representations of image files. Structured schemas take the form of JSON objects, which map sub-attribute keys to further attribute schemas. Thesse nested schemas can likewise be either primitive or structured. In this way, arbitrarily complex structures can be represented within a single attribute. To mark that a sub-attribute should be able to take on multiple values within a single data point, or that the value of a sub-attribute should be a list, enclose the name of the sub-attribute in square brackets.","title":"Attribute Schemas"},{"location":"tutorials/attribute-schemas/#examples","text":"An example schema that could be used to store a person's name: { \"firstName\" : \"string\" , \"[middleName]\" : \"string\" , // By enclosing the sub-attribute key in square brackets, // we mark that this sub-attribute's value is a list. // This allows recording that a person has multiple middle names. \"lastName\" : \"string\" } A valid value for an attribute with this schema would be: { \"firstName\" : \"John\" , \"middleName\" : [ // Don't include the square brackets in the sub-attribute key when sending the attribute value! \"Ronald\" , \"Reuel\" ], \"lastName\" : \"Tolkien\" } An example schema that could be used to store a person's credit card information: { \"creditCardNumber\" : \"string\" , \"CVV\" : \"string\" , \"expirationDate\" : { \"month\" : \"int\" , \"year\" : \"int\" } } A valid value for an attribute with this schema would be: { \"creditCardNumber\" : \"0000 1234 5678 9999\" , \"CVV\" : \"321\" , \"expirationDate\" : { \"month\" : 2 , \"year\" : 2025 } }","title":"Examples"},{"location":"tutorials/datasharing/","text":"Data Sharing ViziVault Enterprise allows you to share your data securely and control who has access to shared data. In the Data Sharing section of ViziVault's web interface, you can set up data to be shared periodically on a schedule, or set up on-demand sharing for a recipient to send data to them at any time at the click of a button. When you start a new data sharing schedule, the system will generate a new keypair specific to that schedule. The public encryption key will be saved and used to re-encrypt the data when it is shared, and the private decryption key will be emailed to the data recipient and stored nowhere else. This ensures that your recipient will be able to read the data that is meant for them, but that they will not be able to read data you send to anyone else, and that nobody else will be able to read the data you send to them. Viewing data sharing schedules The Data Sharing page displays a list of all active data sharing schedules, listing the attributes they sent, their frequency, their delivery method, their data format, and when they were last sent. Clicking the eye icon next to a data sharing schedule will list data packages that were shared by that schedule, provide links to download these packages, and display metadata about the data package. Clicking the pencil icon will allow you to modify the schedule. Data schedules that are marked as on-demand will also have an airplane icon; clicking this will initiate a data transfer. Creating data sharing schedules By clicking the plus icon at the top of the page, a new data sharing schedule can be created. Recipient and Business Justification These two fields provide a human-readable description of the schedule in two parts, explaining who the data is going to and why they need it. In the interest of documenting what data sharing is occurring, both fields are required. Attributes This field allows you to specify what data will be shared by entering a list of attributes. Only data belonging to attributes that are specified here will be shared. Frequency Specifies how often data wlll be sent: once per hour, once per day, once per week, once per month, once per quarter, once per year, or on demand. If \"on demand\" is selected, the schedule will not send data automatically; instead, an icon of a paper airplane will appear next to this schedule on the list of data sharing schedules, and clicking the airplane icon will share this data. Delivery Method Specifies how the data will be transmitted. Options include \"file download\" and \"email\". If \"file download\" is selected, the data will be packaged into files that are stored on the ViziVault Enterprise server. These files can be accessed by selecting the corresponding schedule on the list of data sharing schedules and clicking the eye icon to view more details about it. If the file is intended to be given to an external entity, a user can download the files from this page and send them to the recipient through any channel they want. If \"email\" is selected, the user will be prompted to enter an email address and a subject line. Whenever this schedule creates a data sharing package, it will be sent to the specified email address as an attachment in an email with the specified subject line. File Format Specifies what file type the exported data package will be. By default, this is a CSV file; other options include JSON and XML.","title":"Data Sharing"},{"location":"tutorials/datasharing/#data-sharing","text":"ViziVault Enterprise allows you to share your data securely and control who has access to shared data. In the Data Sharing section of ViziVault's web interface, you can set up data to be shared periodically on a schedule, or set up on-demand sharing for a recipient to send data to them at any time at the click of a button. When you start a new data sharing schedule, the system will generate a new keypair specific to that schedule. The public encryption key will be saved and used to re-encrypt the data when it is shared, and the private decryption key will be emailed to the data recipient and stored nowhere else. This ensures that your recipient will be able to read the data that is meant for them, but that they will not be able to read data you send to anyone else, and that nobody else will be able to read the data you send to them.","title":"Data Sharing"},{"location":"tutorials/datasharing/#viewing-data-sharing-schedules","text":"The Data Sharing page displays a list of all active data sharing schedules, listing the attributes they sent, their frequency, their delivery method, their data format, and when they were last sent. Clicking the eye icon next to a data sharing schedule will list data packages that were shared by that schedule, provide links to download these packages, and display metadata about the data package. Clicking the pencil icon will allow you to modify the schedule. Data schedules that are marked as on-demand will also have an airplane icon; clicking this will initiate a data transfer.","title":"Viewing data sharing schedules"},{"location":"tutorials/datasharing/#creating-data-sharing-schedules","text":"By clicking the plus icon at the top of the page, a new data sharing schedule can be created.","title":"Creating data sharing schedules"},{"location":"tutorials/datasharing/#recipient-and-business-justification","text":"These two fields provide a human-readable description of the schedule in two parts, explaining who the data is going to and why they need it. In the interest of documenting what data sharing is occurring, both fields are required.","title":"Recipient and Business Justification"},{"location":"tutorials/datasharing/#attributes","text":"This field allows you to specify what data will be shared by entering a list of attributes. Only data belonging to attributes that are specified here will be shared.","title":"Attributes"},{"location":"tutorials/datasharing/#frequency","text":"Specifies how often data wlll be sent: once per hour, once per day, once per week, once per month, once per quarter, once per year, or on demand. If \"on demand\" is selected, the schedule will not send data automatically; instead, an icon of a paper airplane will appear next to this schedule on the list of data sharing schedules, and clicking the airplane icon will share this data.","title":"Frequency"},{"location":"tutorials/datasharing/#delivery-method","text":"Specifies how the data will be transmitted. Options include \"file download\" and \"email\". If \"file download\" is selected, the data will be packaged into files that are stored on the ViziVault Enterprise server. These files can be accessed by selecting the corresponding schedule on the list of data sharing schedules and clicking the eye icon to view more details about it. If the file is intended to be given to an external entity, a user can download the files from this page and send them to the recipient through any channel they want. If \"email\" is selected, the user will be prompted to enter an email address and a subject line. Whenever this schedule creates a data sharing package, it will be sent to the specified email address as an attachment in an email with the specified subject line.","title":"Delivery Method"},{"location":"tutorials/datasharing/#file-format","text":"Specifies what file type the exported data package will be. By default, this is a CSV file; other options include JSON and XML.","title":"File Format"},{"location":"tutorials/quickstart/","text":"Quickstart In this quickstart we will be overviewing several functions you will typically want to do to help start securing, understanding and using the personal data in your system. Setup In this tutorial you will learn how to load and retrieve personal data about your clients contained in a JSON file. While it's possible to use any personal client data source, we've included a CSV file of ten data subjects with typical data. If you don't have a vault deployed for your organization already, reach out and request a demo vault. Request a Vault When you get your demo vault, you will need its web address. For cloud-hosted vaults, this will be of the form http://vault.anontech.io/VAULT_IDENTIFIER/ , where the vault identifier is a hexadecimal code unique to your organization. For locally-hosted vaults, your administrator can prove you with the root URL to your hosted ViziVault instance. Download the example CSV file Download Sample File Get your encryption key pair Put your public encryption key into a file. In a production system, you may wish to secure your private decryption key further. Even though we deliver our data securely to your system, you may wish to take precautions to secure these keys in your environment. Initialize your connection to the vault With your decryption key, encryption key, path, and application key, we can initialize the connection to your vault. Note that for the purposes of this quickstart we provide the connection with the encryption and decryption key. However, in your application, you may only wish to pull down data and decrypt with the decryption key, or only create new data with the encryption key. Using application keys and access to encyption and decryption keys lets you manage exactly how data is accessed and controlled. In the following eample you will want to make the following replacements: Replace \"./resources/test_encryption_key.txt\" with the path to your encryption file Replace \"./resources/test_decryption_key.txt\" with the path to your decryption file Replace \"https://my.host:8080' with the secure http address and port of your provided vault. C# using IO.Anontech.Vizivault ; using Microsoft.VisualBasic.FileIO ; // for CSV parser /* your namespace and class definition here */ string decryptionKey = System . IO . File . ReadAllText ( \"decryptionKey.txt\" ); string encryptionKey = System . IO . File . ReadAllText ( \"encryptionKey.txt\" ); ViziVault vault = new ViziVault ( new Uri ( \"http://example.com:8080\" )). WithApiKey ( \"your-api-key\" ). WithDecryptionKey ( decryptionKey ). WithEncryptionKey ( encryptionKey ); Python from vizivault import ViziVault , AttributeDefinition , SearchRequest #You'll need this later to load the CSV sample file import csv # 1. Replace 'my_encryption_file.txt' with the path to your encryption file with open ( 'my_encryption_file.txt' , 'r' ) as encryption_file : encryption_key = encryption_file . read () # 2. Replace 'my_decryption_file.txt' with the path to your decryption file with open ( 'my_decryption_file.txt' , 'r' ) as decryption_file : decryption_key = decryption_file . read () # Connect to the vault # 3. Replace 'https://my.host:8080' with the web address and port of your vault server # 4. Replace '12345' with the api key (application key) of your application. vault = vizivault . ViziVault ( base_url = 'https://my.host:8080' , api_key = '12345' , encryption_key = encryption_key , decryption_key = decryption_key ) Java // 1. Replace 'decryptionKey.txt' with the path to your encryption file FileInputStream decKeyFile = new FileInputStream ( new File ( \"src\" + File . separator + \"test\" + File . separator + \"resources\" + File . separator + \"decryptionKey.txt\" )); decryptionKey = new String ( decKeyFile . readAllBytes ()); decKeyFile . close (); // 2. Replace 'encryptionKey.txt' with the path to your encryption file FileInputStream encKeyFile = new FileInputStream ( new File ( \"src\" + File . separator + \"test\" + File . separator + \"resources\" + File . separator + \"encryptionKey.txt\" )); encryptionKey = new String ( encKeyFile . readAllBytes ()); encKeyFile . close (); // Connect to the vault // 3. Replace 'https://my.host:8080' with the web address and port of your vault server // 4. Replace '12345' with the api key (application key) of your application. ViziVault vault = new ViziVault ( new URL ( \"http://localhost:8080\" )). withApiKey ( \"12345\" ). withDecryptionKey ( decryptionKey ). withEncryptionKey ( encryptionKey ); Creating Attributes The first thing we will need to do is establish attributes to store all of the data from our client. Attribute definitions specify the structure and rules that will govern how your data is stored. For example, this can tell ViziVault whether a data subject can have more than one value of an attribute, and whether the data should be indexed for search functionality. We can also directly associate tags and regulations here, establishing how Vizivault will treat the data for retention, storage, and sharing. We start with creating some very simple attributes with no structure, such as strings or numeric data. In the next example we will see how to handle data in cases where you only may be interested in retrieving part of a related set of data, or where the data has an internal structure. The hint parameter contains a sample value of the attribute for the purposes of demonstrating the intended format. C# AttributeDefinition eyeColorAttributeDef = new AttributeDefinition ( \"EyeColor\" ) { Hint = \"Green\" }; AttributeDefinition ageAttributeDef = new AttributeDefinition ( \"Age\" ) { Hint = \"18\" }; await vault . StoreAttributeDefinitionAsync ( eyeColorAttributeDef ); await vault . StoreAttributeDefinitionAsync ( ageAttributeDef ); Python eye_color_attribute_def = vault . AttributeDefinition ( key = \"EYE_COLOR\" , name = \"Eye Color\" , hint = \"Green\" ) age_attribute_def = vault . AttributeDefinition ( key = \"AGE\" , name = \"Age\" , hint = \"18\" ) vault . store_attribute_definition ( attribute_definition = eye_color_attribute_def ) vault . store_attribute_definition ( attribute_definition = age_attribute_def ) Java AttributeDefinition eyeColorattributeDef = new AttributeDefinition ( \"EyeColor\" ); eyeColorattributeDef . setHint ( \"Green\" ); AttributeDefinition ageAttributeDef = new AttributeDefinition ( \"Age\" ); ageAttributeDef . setHint ( \"18\" ); vault . storeAttributeDefinition ( eyeColorAttributeDef ); vault . storeAttributeDefinition ( ageAttributeDef ); Creating Attributes with Structure Let's add some attributes with structure. Here we add a data subject's full name and their billing address. We may wish to extract, update, or perform business logic on part of this data, so we store related attribute data in schemas. Here we add schemas that allow nested structures with multiple components. Each component has a type which can be: string: For textual data, up to 126 characters long. int: For data that can be expressed as an integer. float: For numeric data that cannot be expressed as an integer. boolean: For data that takes one of the two values \"true\" or \"false\". file: For data that takes more than 126 characters to represent, such as long text files or base64-encoded representations of image files. C# // Put these classes in your namespace public class Name { public string FirstName { get ; set ;} public string LastName { get ; set ;} public string MiddleName { get ; set ;} public string Nickname { get ; set ;} public string MaidenName { get ; set ;} public string Company { get ; set ;} } public class Address { public string LineOne { get ; set ;} public string LineTwo { get ; set ;} public string City { get ; set ;} public string State { get ; set ;} public string PostalCode { get ; set ;} public string Country { get ; set ;} } AttributeDefinition nameAttributeDef = new AttributeDefinition ( \"Name\" ) { Hint = \"{first_name: \\\"Agnes\\\", last_name: \\\"Driscoll\\\", middle_name: \\\"May\\\", nickname: \\\"Madame X\\\", maiden_name: \\\"Meyer\\\", company: \\\"Hebern Electric\\\"}\" }; nameAttributeDef . SchemaFromClass ( typeof ( Name )); AttributeDefinition addressAttributeDef = new AttributeDefinition ( \"Address\" ) { Hint = \"{line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\", country: \\\"USA\\\"}\" }; addressAttributeDef . SchemaFromClass ( typeof ( Address )); await vault . StoreAttributeDefinitionAsync ( nameAttributeDef ); await vault . StoreAttributeDefinitionAsync ( addressAttributeDef ); Python name_attribute_def = vault . AttributeDefinition ( key = 'CLIENT_NAME' , name = \"Client Name\" , hint = \"{first_name: \\\" Agnes \\\" ,\" \"last_name: \\\" Driscoll \\\" ,\" \"middle_name: \\\" May \\\" ,\" \"nickname: \\\" Madame X \\\" ,\" \"maiden_name: \\\" Meyer \\\" ,\" \"company: \\\" Hebern Electric \\\" }\" , schema = { \"first_name\" : \"string\" , \"last_name\" : \"string\" , \"middle_name\" : \"string\" , \"nickname\" : \"string\" , \"maiden_name\" : \"string\" , \"company\" : \"string\" } ) address_attribute_def = vault . AttributeDefinition ( key = \"BILLING_ADDRESS\" , name = \"Billing Address\" , hint = \"{line_one: \\\" 1 Hacker Way \\\" ,\" \"line_two: \\\" Apt. 53 \\\" , \" \"city: \\\" Menlo Park \\\" , \" \"state: \\\" California \\\" , \" \"postal_code: \\\" 94025-1456 \\\" , \" \"country: \\\" USA \\\" }\" , schema = { \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" } ) vault . store_attribute_definition ( attribute_definition = name_attribute_def ) vault . store_attribute_definition ( attribute_definition = address_attribute_def ) Java public static class Name { public String firstName ; public String lastName ; public String middleName ; public String nickName ; public String maidenName ; public String company ; public void setFirstName ( String firstName ) { this . firstName = firstName ; } public void setLastName ( String lastName ) { this . lastName = lastName ; } public void setMiddleName ( String middleName ) { this . middleName = middleName ; } public void setNickName ( String nickName ) { this . nickName = nickName ; } public void setMaidenName ( String maidenName ) { this . maidenName = maidenName ; } public void setCompany ( String company ) { this . company = company ; } } public static class Address { public String street ; public String city ; public String state ; public String postalCode ; public String country ; public void setStreet ( String street ) { this . street = street ; } public void setCity ( String city ) { this . city = city ; } public void setState ( String state ) { this . state = state ; } public void setPostalCode ( String postalCode ) { this . postalCode = postalCode ; } public void setCountry ( String country ) { this . country = country ; } } Loading Data Now that we have attributes, let's load some data. We will iterate over every example in our sample CSV. For each row we define a data subject based on the subject id. Then we simply load the vaules for the flat files. For structured object data we create a hash structure and insert the key/value pairs. Finally, we save the completed data subject to the vault. C# using ( var parser = new TextFieldParser ( \"./resources/tutorial_test.csv\" )) { parser . TextFieldType = FieldType . Delimited ; parser . setDelimiters ( \",\" ); string [] headers = parser . ReadFields (); while ( ! parser . EndOfData ) { string [] cells = parser . ReadFields (); Dictionary < string , string > userData = new Dictionary < string , string > (); for ( int i = 0 ; i < cells . Length ; ++ i ) { userData [ headers [ i ]] = cells [ i ]; } DataSubject dataSubject = new DataSubject ( userData [ \"SUBJECTID\" ]); dataSubject . addAttribute ( eyeColorAttributeDef . Name , userData [ \"EYE_COLOR\" ]); dataSubject . addAttribute ( ageAttributeDef . Name , userData [ \"AGE\" ]); dataSubject . addAttribute ( nameAttributeDef . Name , new Name (){ FirstName = userData [ \"FIRST_NAME\" ], LastName = userData [ \"LAST_NAME\" ], MiddleName = userData [ \"MIDDLE_NAME\" ], Company = userData [ \"COMPANY\" ] }); dataSubject . addAttribute ( addressAttributeDef . Name , new Address (){ Street = userData [ \"STREET\" ], City = userData [ \"CITY\" ], State = userData [ \"STATE\" ], Country = userData [ \"COUNTRY\" ] }); await vault . SaveAsync ( dataSubject ); } } Python with open ( './resources/tutorial_test.csv' , 'r' ) as csv_file : csv_reader = csv . reader ( csv_file , delimiter = ',' ) header_row = True user_data = {} for row in csv_reader : if header_row : headers = row header_row = False else : for index , name in enumerate ( headers , start = 0 ): user_data [ name ] = row [ index ] # Create a User new_user = User ( user_data [ 'USERID' ]) # Add the attribute values new_user . add_attribute ( attribute = eye_color_attribute_def . key , value = user_data [ \"EYE_COLOR\" ]) new_user . add_attribute ( attribute = age_attribute_def . key , value = user_data [ \"AGE\" ]) # Create a dictionary for the user's name user_name = { \"first_name\" : user_data [ \"FIRST_NAME\" ], \"last_name\" : user_data [ \"LAST_NAME\" ], \"middle_name\" : user_data [ \"MIDDLE_NAME\" ], \"company\" : user_data [ \"COMPANY\" ] } # Save the user's name new_user . add_attribute ( attribute = name_attribute_def . key , value = user_name ) # Create a dictionary for the address address = { \"street\" : user_data [ \"STREET\" ], \"city\" : user_data [ \"CITY\" ], \"state\" : user_data [ \"STATE\" ], \"country\" : user_data [ \"COUNTRY\" ] } # Save the Address new_user . add_attribute ( attribute = address_attribute_def . key , value = address ) vault . save ( new_user ) # Cleanup csv_reader = csv . reader ( csv_file , delimiter = ',' ) header_row = True user_data = {} for row in csv_reader : if header_row : headers = row header_row = False vault . purge ( new_user . id ) Java File csvSampleFile = new File ( \"src\" + File . separator + \"test\" + File . separator + \"resources\" + File . separator + \"tutorial_test.csv\" ); Reader csvReader = new FileReader ( csvSampleFile ); // Use Jackson Iterator < Map < String , String >> iterator = new CsvMapper () . readerFor ( Map . class ) . with ( CsvSchema . emptySchema (). withHeader ()) . readValues ( csvReader ); while ( iterator . hasNext ()) { Map < String , String > csvVals = iterator . next (); DataSubject dataSubject = new DataSubject ( csvVals . get ( \"SUBJECTID\" )); dataSubject . addAttribute ( eyeColorattributeDef . getName (), csvVals . get ( \"SUBJECTID\" )); dataSubject . addAttribute ( ageAttributeDef . getName (), csvVals . get ( \"AGE\" )); Name name = new Name (); name . setFirstName ( csvVals . get ( \"FIRST_NAME\" )); name . setLastName ( csvVals . get ( \"LAST_NAME\" )); name . setMiddleName ( csvVals . get ( \"MIDDLE_NAME\" )); name . setCompany ( csvVals . get ( \"COMPANY\" )); dataSubject . addAttribute ( nameAttributeDef . getName (), myName ); Address address = new Address (); address . setStreet ( csvVals . get ( \"STREET\" )); address . setCity ( csvVals . get ( \"CITY\" )); address . setState ( csvVals . get ( \"STATE\" )); address . setCountry ( csvVals . get ( \"COUNTRY\" )); dataSubject . addAttribute ( addressAttributeDef . getName (), myAddress ); vault . save ( dataSubject ); } Retrieving Data for a Data Subject Now that we have data in the system, let's try to get our data back. Here we grab the data for a data subject with the id 101. C# DataSubject receivedSubject = await vault . FindByDataSubjectAsync ( \"101\" ); foreach ( AttributeValue attr in receivedSubject . Attributes ) { Console . WriteLine ( $\"Attribute: {attr.AttributeKey}; Value: {attr.Value}\" ); } Python received_user = vault . find_by_user ( entity_id = '101' ) for attribute in received_user . get_attributes (): print ( 'Attribute:' + attribute . attribute + 'Value:' + attribute . value ) Java DataSubject receivedSubject = vault . findByDataSubject ( \"101\" ); for ( Attribute attribute : receivedSubject . getAttributes ()) { System . out . printf ( \"attribute_name: %s attribute_value: %s%n\" , attribute . getAttribute (), attribute . getValue ()); } Next Steps This guide covers basic usage. You can look at our tutorials for more advanced usage including searching and implementing rules .","title":"Quickstart"},{"location":"tutorials/quickstart/#quickstart","text":"In this quickstart we will be overviewing several functions you will typically want to do to help start securing, understanding and using the personal data in your system.","title":"Quickstart"},{"location":"tutorials/quickstart/#setup","text":"In this tutorial you will learn how to load and retrieve personal data about your clients contained in a JSON file. While it's possible to use any personal client data source, we've included a CSV file of ten data subjects with typical data. If you don't have a vault deployed for your organization already, reach out and request a demo vault. Request a Vault When you get your demo vault, you will need its web address. For cloud-hosted vaults, this will be of the form http://vault.anontech.io/VAULT_IDENTIFIER/ , where the vault identifier is a hexadecimal code unique to your organization. For locally-hosted vaults, your administrator can prove you with the root URL to your hosted ViziVault instance. Download the example CSV file Download Sample File","title":"Setup"},{"location":"tutorials/quickstart/#get-your-encryption-key-pair","text":"Put your public encryption key into a file. In a production system, you may wish to secure your private decryption key further. Even though we deliver our data securely to your system, you may wish to take precautions to secure these keys in your environment.","title":"Get your encryption key pair"},{"location":"tutorials/quickstart/#initialize-your-connection-to-the-vault","text":"With your decryption key, encryption key, path, and application key, we can initialize the connection to your vault. Note that for the purposes of this quickstart we provide the connection with the encryption and decryption key. However, in your application, you may only wish to pull down data and decrypt with the decryption key, or only create new data with the encryption key. Using application keys and access to encyption and decryption keys lets you manage exactly how data is accessed and controlled. In the following eample you will want to make the following replacements: Replace \"./resources/test_encryption_key.txt\" with the path to your encryption file Replace \"./resources/test_decryption_key.txt\" with the path to your decryption file Replace \"https://my.host:8080' with the secure http address and port of your provided vault. C# using IO.Anontech.Vizivault ; using Microsoft.VisualBasic.FileIO ; // for CSV parser /* your namespace and class definition here */ string decryptionKey = System . IO . File . ReadAllText ( \"decryptionKey.txt\" ); string encryptionKey = System . IO . File . ReadAllText ( \"encryptionKey.txt\" ); ViziVault vault = new ViziVault ( new Uri ( \"http://example.com:8080\" )). WithApiKey ( \"your-api-key\" ). WithDecryptionKey ( decryptionKey ). WithEncryptionKey ( encryptionKey ); Python from vizivault import ViziVault , AttributeDefinition , SearchRequest #You'll need this later to load the CSV sample file import csv # 1. Replace 'my_encryption_file.txt' with the path to your encryption file with open ( 'my_encryption_file.txt' , 'r' ) as encryption_file : encryption_key = encryption_file . read () # 2. Replace 'my_decryption_file.txt' with the path to your decryption file with open ( 'my_decryption_file.txt' , 'r' ) as decryption_file : decryption_key = decryption_file . read () # Connect to the vault # 3. Replace 'https://my.host:8080' with the web address and port of your vault server # 4. Replace '12345' with the api key (application key) of your application. vault = vizivault . ViziVault ( base_url = 'https://my.host:8080' , api_key = '12345' , encryption_key = encryption_key , decryption_key = decryption_key ) Java // 1. Replace 'decryptionKey.txt' with the path to your encryption file FileInputStream decKeyFile = new FileInputStream ( new File ( \"src\" + File . separator + \"test\" + File . separator + \"resources\" + File . separator + \"decryptionKey.txt\" )); decryptionKey = new String ( decKeyFile . readAllBytes ()); decKeyFile . close (); // 2. Replace 'encryptionKey.txt' with the path to your encryption file FileInputStream encKeyFile = new FileInputStream ( new File ( \"src\" + File . separator + \"test\" + File . separator + \"resources\" + File . separator + \"encryptionKey.txt\" )); encryptionKey = new String ( encKeyFile . readAllBytes ()); encKeyFile . close (); // Connect to the vault // 3. Replace 'https://my.host:8080' with the web address and port of your vault server // 4. Replace '12345' with the api key (application key) of your application. ViziVault vault = new ViziVault ( new URL ( \"http://localhost:8080\" )). withApiKey ( \"12345\" ). withDecryptionKey ( decryptionKey ). withEncryptionKey ( encryptionKey );","title":"Initialize your connection to the vault"},{"location":"tutorials/quickstart/#creating-attributes","text":"The first thing we will need to do is establish attributes to store all of the data from our client. Attribute definitions specify the structure and rules that will govern how your data is stored. For example, this can tell ViziVault whether a data subject can have more than one value of an attribute, and whether the data should be indexed for search functionality. We can also directly associate tags and regulations here, establishing how Vizivault will treat the data for retention, storage, and sharing. We start with creating some very simple attributes with no structure, such as strings or numeric data. In the next example we will see how to handle data in cases where you only may be interested in retrieving part of a related set of data, or where the data has an internal structure. The hint parameter contains a sample value of the attribute for the purposes of demonstrating the intended format. C# AttributeDefinition eyeColorAttributeDef = new AttributeDefinition ( \"EyeColor\" ) { Hint = \"Green\" }; AttributeDefinition ageAttributeDef = new AttributeDefinition ( \"Age\" ) { Hint = \"18\" }; await vault . StoreAttributeDefinitionAsync ( eyeColorAttributeDef ); await vault . StoreAttributeDefinitionAsync ( ageAttributeDef ); Python eye_color_attribute_def = vault . AttributeDefinition ( key = \"EYE_COLOR\" , name = \"Eye Color\" , hint = \"Green\" ) age_attribute_def = vault . AttributeDefinition ( key = \"AGE\" , name = \"Age\" , hint = \"18\" ) vault . store_attribute_definition ( attribute_definition = eye_color_attribute_def ) vault . store_attribute_definition ( attribute_definition = age_attribute_def ) Java AttributeDefinition eyeColorattributeDef = new AttributeDefinition ( \"EyeColor\" ); eyeColorattributeDef . setHint ( \"Green\" ); AttributeDefinition ageAttributeDef = new AttributeDefinition ( \"Age\" ); ageAttributeDef . setHint ( \"18\" ); vault . storeAttributeDefinition ( eyeColorAttributeDef ); vault . storeAttributeDefinition ( ageAttributeDef );","title":"Creating Attributes"},{"location":"tutorials/quickstart/#creating-attributes-with-structure","text":"Let's add some attributes with structure. Here we add a data subject's full name and their billing address. We may wish to extract, update, or perform business logic on part of this data, so we store related attribute data in schemas. Here we add schemas that allow nested structures with multiple components. Each component has a type which can be: string: For textual data, up to 126 characters long. int: For data that can be expressed as an integer. float: For numeric data that cannot be expressed as an integer. boolean: For data that takes one of the two values \"true\" or \"false\". file: For data that takes more than 126 characters to represent, such as long text files or base64-encoded representations of image files. C# // Put these classes in your namespace public class Name { public string FirstName { get ; set ;} public string LastName { get ; set ;} public string MiddleName { get ; set ;} public string Nickname { get ; set ;} public string MaidenName { get ; set ;} public string Company { get ; set ;} } public class Address { public string LineOne { get ; set ;} public string LineTwo { get ; set ;} public string City { get ; set ;} public string State { get ; set ;} public string PostalCode { get ; set ;} public string Country { get ; set ;} } AttributeDefinition nameAttributeDef = new AttributeDefinition ( \"Name\" ) { Hint = \"{first_name: \\\"Agnes\\\", last_name: \\\"Driscoll\\\", middle_name: \\\"May\\\", nickname: \\\"Madame X\\\", maiden_name: \\\"Meyer\\\", company: \\\"Hebern Electric\\\"}\" }; nameAttributeDef . SchemaFromClass ( typeof ( Name )); AttributeDefinition addressAttributeDef = new AttributeDefinition ( \"Address\" ) { Hint = \"{line_one: \\\"1 Hacker Way\\\", line_two: \\\"Apt. 53\\\", city: \\\"Menlo Park\\\", state: \\\"California\\\", postal_code: \\\"94025-1456\\\", country: \\\"USA\\\"}\" }; addressAttributeDef . SchemaFromClass ( typeof ( Address )); await vault . StoreAttributeDefinitionAsync ( nameAttributeDef ); await vault . StoreAttributeDefinitionAsync ( addressAttributeDef ); Python name_attribute_def = vault . AttributeDefinition ( key = 'CLIENT_NAME' , name = \"Client Name\" , hint = \"{first_name: \\\" Agnes \\\" ,\" \"last_name: \\\" Driscoll \\\" ,\" \"middle_name: \\\" May \\\" ,\" \"nickname: \\\" Madame X \\\" ,\" \"maiden_name: \\\" Meyer \\\" ,\" \"company: \\\" Hebern Electric \\\" }\" , schema = { \"first_name\" : \"string\" , \"last_name\" : \"string\" , \"middle_name\" : \"string\" , \"nickname\" : \"string\" , \"maiden_name\" : \"string\" , \"company\" : \"string\" } ) address_attribute_def = vault . AttributeDefinition ( key = \"BILLING_ADDRESS\" , name = \"Billing Address\" , hint = \"{line_one: \\\" 1 Hacker Way \\\" ,\" \"line_two: \\\" Apt. 53 \\\" , \" \"city: \\\" Menlo Park \\\" , \" \"state: \\\" California \\\" , \" \"postal_code: \\\" 94025-1456 \\\" , \" \"country: \\\" USA \\\" }\" , schema = { \"line_one\" : \"string\" , \"line_two\" : \"string\" , \"city\" : \"string\" , \"state\" : \"string\" , \"postal_code\" : \"string\" , \"country\" : \"string\" } ) vault . store_attribute_definition ( attribute_definition = name_attribute_def ) vault . store_attribute_definition ( attribute_definition = address_attribute_def ) Java public static class Name { public String firstName ; public String lastName ; public String middleName ; public String nickName ; public String maidenName ; public String company ; public void setFirstName ( String firstName ) { this . firstName = firstName ; } public void setLastName ( String lastName ) { this . lastName = lastName ; } public void setMiddleName ( String middleName ) { this . middleName = middleName ; } public void setNickName ( String nickName ) { this . nickName = nickName ; } public void setMaidenName ( String maidenName ) { this . maidenName = maidenName ; } public void setCompany ( String company ) { this . company = company ; } } public static class Address { public String street ; public String city ; public String state ; public String postalCode ; public String country ; public void setStreet ( String street ) { this . street = street ; } public void setCity ( String city ) { this . city = city ; } public void setState ( String state ) { this . state = state ; } public void setPostalCode ( String postalCode ) { this . postalCode = postalCode ; } public void setCountry ( String country ) { this . country = country ; } }","title":"Creating Attributes with Structure"},{"location":"tutorials/quickstart/#loading-data","text":"Now that we have attributes, let's load some data. We will iterate over every example in our sample CSV. For each row we define a data subject based on the subject id. Then we simply load the vaules for the flat files. For structured object data we create a hash structure and insert the key/value pairs. Finally, we save the completed data subject to the vault. C# using ( var parser = new TextFieldParser ( \"./resources/tutorial_test.csv\" )) { parser . TextFieldType = FieldType . Delimited ; parser . setDelimiters ( \",\" ); string [] headers = parser . ReadFields (); while ( ! parser . EndOfData ) { string [] cells = parser . ReadFields (); Dictionary < string , string > userData = new Dictionary < string , string > (); for ( int i = 0 ; i < cells . Length ; ++ i ) { userData [ headers [ i ]] = cells [ i ]; } DataSubject dataSubject = new DataSubject ( userData [ \"SUBJECTID\" ]); dataSubject . addAttribute ( eyeColorAttributeDef . Name , userData [ \"EYE_COLOR\" ]); dataSubject . addAttribute ( ageAttributeDef . Name , userData [ \"AGE\" ]); dataSubject . addAttribute ( nameAttributeDef . Name , new Name (){ FirstName = userData [ \"FIRST_NAME\" ], LastName = userData [ \"LAST_NAME\" ], MiddleName = userData [ \"MIDDLE_NAME\" ], Company = userData [ \"COMPANY\" ] }); dataSubject . addAttribute ( addressAttributeDef . Name , new Address (){ Street = userData [ \"STREET\" ], City = userData [ \"CITY\" ], State = userData [ \"STATE\" ], Country = userData [ \"COUNTRY\" ] }); await vault . SaveAsync ( dataSubject ); } } Python with open ( './resources/tutorial_test.csv' , 'r' ) as csv_file : csv_reader = csv . reader ( csv_file , delimiter = ',' ) header_row = True user_data = {} for row in csv_reader : if header_row : headers = row header_row = False else : for index , name in enumerate ( headers , start = 0 ): user_data [ name ] = row [ index ] # Create a User new_user = User ( user_data [ 'USERID' ]) # Add the attribute values new_user . add_attribute ( attribute = eye_color_attribute_def . key , value = user_data [ \"EYE_COLOR\" ]) new_user . add_attribute ( attribute = age_attribute_def . key , value = user_data [ \"AGE\" ]) # Create a dictionary for the user's name user_name = { \"first_name\" : user_data [ \"FIRST_NAME\" ], \"last_name\" : user_data [ \"LAST_NAME\" ], \"middle_name\" : user_data [ \"MIDDLE_NAME\" ], \"company\" : user_data [ \"COMPANY\" ] } # Save the user's name new_user . add_attribute ( attribute = name_attribute_def . key , value = user_name ) # Create a dictionary for the address address = { \"street\" : user_data [ \"STREET\" ], \"city\" : user_data [ \"CITY\" ], \"state\" : user_data [ \"STATE\" ], \"country\" : user_data [ \"COUNTRY\" ] } # Save the Address new_user . add_attribute ( attribute = address_attribute_def . key , value = address ) vault . save ( new_user ) # Cleanup csv_reader = csv . reader ( csv_file , delimiter = ',' ) header_row = True user_data = {} for row in csv_reader : if header_row : headers = row header_row = False vault . purge ( new_user . id ) Java File csvSampleFile = new File ( \"src\" + File . separator + \"test\" + File . separator + \"resources\" + File . separator + \"tutorial_test.csv\" ); Reader csvReader = new FileReader ( csvSampleFile ); // Use Jackson Iterator < Map < String , String >> iterator = new CsvMapper () . readerFor ( Map . class ) . with ( CsvSchema . emptySchema (). withHeader ()) . readValues ( csvReader ); while ( iterator . hasNext ()) { Map < String , String > csvVals = iterator . next (); DataSubject dataSubject = new DataSubject ( csvVals . get ( \"SUBJECTID\" )); dataSubject . addAttribute ( eyeColorattributeDef . getName (), csvVals . get ( \"SUBJECTID\" )); dataSubject . addAttribute ( ageAttributeDef . getName (), csvVals . get ( \"AGE\" )); Name name = new Name (); name . setFirstName ( csvVals . get ( \"FIRST_NAME\" )); name . setLastName ( csvVals . get ( \"LAST_NAME\" )); name . setMiddleName ( csvVals . get ( \"MIDDLE_NAME\" )); name . setCompany ( csvVals . get ( \"COMPANY\" )); dataSubject . addAttribute ( nameAttributeDef . getName (), myName ); Address address = new Address (); address . setStreet ( csvVals . get ( \"STREET\" )); address . setCity ( csvVals . get ( \"CITY\" )); address . setState ( csvVals . get ( \"STATE\" )); address . setCountry ( csvVals . get ( \"COUNTRY\" )); dataSubject . addAttribute ( addressAttributeDef . getName (), myAddress ); vault . save ( dataSubject ); }","title":"Loading Data"},{"location":"tutorials/quickstart/#retrieving-data-for-a-data-subject","text":"Now that we have data in the system, let's try to get our data back. Here we grab the data for a data subject with the id 101. C# DataSubject receivedSubject = await vault . FindByDataSubjectAsync ( \"101\" ); foreach ( AttributeValue attr in receivedSubject . Attributes ) { Console . WriteLine ( $\"Attribute: {attr.AttributeKey}; Value: {attr.Value}\" ); } Python received_user = vault . find_by_user ( entity_id = '101' ) for attribute in received_user . get_attributes (): print ( 'Attribute:' + attribute . attribute + 'Value:' + attribute . value ) Java DataSubject receivedSubject = vault . findByDataSubject ( \"101\" ); for ( Attribute attribute : receivedSubject . getAttributes ()) { System . out . printf ( \"attribute_name: %s attribute_value: %s%n\" , attribute . getAttribute (), attribute . getValue ()); }","title":"Retrieving Data for a Data Subject"},{"location":"tutorials/quickstart/#next-steps","text":"This guide covers basic usage. You can look at our tutorials for more advanced usage including searching and implementing rules .","title":"Next Steps"},{"location":"tutorials/rules/","text":"Rules ViziVault contains a flexible and powerful rules engine that can automate tasks on incoming data. When data is stored in your system, you can configure rules that will check the data against configurable constraints and perform various actions based on which predicates match. This can add metadata taggings such as marking the data with what regulations govern its use (such as GDPR or HIPAA), send notifications to you, or prevent the data from being stored entirely. There are four parts to every rule: a name, a constraint that determines when the rule should be active, an action to take when the rule is active, and optionally an execution order that specifies when this rule should be run relative to other rules. Rules can operate on either data or activity ; the constraints and actions available for activity rules differ from those available for data rules. Constraints Attribute list constraints Attribute constraints are applicable to both data rules and activity rules. The simplest constraint is an attribute list constraint, which can mark a rule as applying to either all attributes in a specified list, or all attributes that are not in that specified list. The attribute list constraint consists of a list of attribute keys, and an operator, which is either any (which will match data whose attribute is in the list) or none (which will match data whose attribute is not in the list). Geographic constraints Geographic constraints are applicable to both data rules and activity rules. Geographic constraints match incoming data based on the data's geographic location. Note that geolocation data is based on the IP address of the HTTP request storing the data; if there are proxy servers involved, this constraint may not always be fully accurate. A geographic constraint consists of an operator (either any or none ), a list of countries, and a list of subdivisions. Countries are represented using ISO 3166-1 two-letter codes, and subdivisions are represented using ISO 3166-2 hyphenated codes. Tag list constraints Tag constraints are applicable only to data rules. Tag list constraints are similar to attribute list constraints, in that they consist of a list of tags and an operator. However, since a data point can have multiple tags (but not belong to multiple attributes), the operator all is also allowed; in this case, the constraint would only match data points whose attribute is tagged with all of the tags in the provided list. Regulation list constraints Regulation constraints are applicable only to data rules. Regulation constraints are much the same as attribute list constraints and tag list constraints, consisting of an operator which is any or all or none and a list of regulations. Entity type constraints Entity type constraints are applicable only to data rules. Entity type constraints consist of a list of entity type keys and will match incoming data belonging to an entity of one of the specified types. Value constraints Value constraints are applicable only to data rules. Value constraints allow you to activate rules based on various properties of the value of an attribute. A value constraint consists of three parts: the attribute to consider, the value to compare the value of the attribute to, and the precise way the attribute values should be compared (referred to as the predicate). Value constraints can be combined with entity tag actions to allow tags to be added based off of the values of the entity's other attributes. The valid predicates are as follows: eq : Matches entities whose value of this attribute is exactly equal to the provided value. neq : Matches entities whose value of this attribute is anything other than the provided value. gt : For numerical data; matches entities whose value of this attribute is greater than the provided value. lt : For numerical data; matches entities whose value of this attribute is less than the provided value. geq : For numerical data; matches entities whose value of this attribute is greater than or equal to the provided value. leq : For numerical data; matches entities whose value of this attribute is less than or equal to the provided value. after : For temporal data; matches entities whose value of this attribute is a later time than the provided value. before : For temporal data; matches entities whose value of this attribute is an earlier time than the provided value. in : Treats the value as a comma-delimited list of strings and matches entities whose value of this attribute appears in the provided list. nin : Treats the value as a comma-delimited list of strings and matches entities whose value of this attribute does not appear in the provided list. regex : Treats the value as a regular expression and matches entities whose value of this attribute is a string that matches the provided regular expression. Sentiment constraints Sentiment constraints are applicable only to data rules. For data whose value is natural-language text, the sentiment constraint uses IBM's Watson system to perform sentiment analysis on the data value. Watson detects the overall sentiment of text, as well as the sentiment that the text expresses towards specific topics. This constraint will match data if the overall detected sentiment is more extreme than the threshold (that is, greater than a positive threshold, or less than a negative one), or if sentiment exceeding the threshold is detected towards any keywords. Application constraints Application constraints are applicable only to activity rules. Application constraints are similar to attribute constraints, containing a list of application ids and an operator that is either \"any\" or \"none\". This will match activity events whose specified application ID is either included or excluded in the list. Event type constraints Event type constraints are applicable only to activity rules. An event type constraint consists of some subset of the strings \"STORE\", \"UPDATE\", \"READ\", and \"DELETE\", and will match activity events whose event type is contained in that subset. Conjunctive (\"all\") constraints Conjunctive constraints are applicable to any rule type. Conjunctive constraints allow you to further constrain what data is matched. They consist of a list of other constraints, and will match data that is matched by all of the constituent constraints. Disjunctive (\"any\") constraints Disjunctive constraints are applicable to any rule type. Disjunctive constraints allow you to broaden what data is matched. They consist of a list of other constraints, and will match data that is matched by any of the constituent constraints. JSON format of constraints Constraints are expressed as a JSON object, structured as described below. The value of the rule's type field determines the rest of its structure. Conjunctive constraint type : the string \"all\" constraints : a list of rule objects Disjunctive constraint type : the string \"any\" constraints : a list of rule objects Attribute constraint type : the string \"attribute\" operator : either any or none attributes : list of attribute keys (strings) Geographic constraint type : the string \"geo\" operator : either any or none countries : list of ISO 3166-1 country codes, as strings subdivisions : list of ISO 3166-2 country subdivision codes, as strings Tag constraint type : the string \"tag\" operator : either any , all , or none tags : list of tag names (strings) Regulation constraint type : the string \"regulation\" operator : either any , all , or none regulations : List of regulation keys (strings) Entity-attribute-value constraint type : the string \"user\" attribute : attribute key (string) predicate : one of eq , neq , gt , lt , geq , leq , before , after , in , nin , value : When predicate is eq or neq , any number or string. When predicate is gt , lt , geq , or leq , any number. When predicate is before or after , a string representing a point in time. When predicate is in or nin , a string consisting of values separated by commas. When predicate is regex , a valid regular expression. Sentiment constraint type : the string sentiment threshold : a floating-point number between -1 and 1 Application constraint type : the string application operator : either any or none applications : list of application ids (strings) Event type constraint type : the string eventType eventTypes : list of strings taken from among \"STORE\" , \"UPDATE\" , \"READ\" , and \"DELETE\" Actions Notification action Notification actions are available in any rule type. A notification action dispatches a notification to the ViziVault enterprise web interface. The text of the notification and its alert level can be configured. Tag metadata action Tag actions are available in both data and activity rules. A tag metadata action applies a tag to data. This can be used for various business logic, for analytics in the ViziVault Enterprise frontend, and to trigger other rules. Activity rules can also be configured to remove tags. Prohibition action Prohibition actions are available in both data and activity rules. A prohibition action marks the relevant entity, stating that certain actions should be disallowed on that entity's data. A prohibition action can also be used to remove an existing prohibition from an entity. Reading data, storing new data, overwriting existing data, and deleting data can all be prohibited. For example, to mark that an entity is under a legal hold and therefore actions that could result in data being lost should be disallowed, overwriting and deleting data should be prohibited, while reading and storing can continue unimpeded. Likewise, a privacy regulation could indicate that a data subject wants their data to not be accessed, which would necessitate disallowing reads. Entity tag action Entity tag actions are available in both data and activity rules. An entity tag action adds or removes a tag on the entity that a data point being accessed belongs to. This will cause the tag to be added to all future data stored about that entity. Regulation metadata action Regulation metadata actions are avaiable only in data rules. A regulation metadata action adds a regulation to data in the same way a tag metadata action adds a tag. Like a tag metadata action, this can be used for internal business logic or to trigger other rules. Storage prevention action Storage prevention actions are available only in data rules. A storage prevention action causes the system to reject data, preventing it from being stored in the system. This is often useful for regulatory compliance. This allows configuring a custom message to display to clients when their data is rejected. Retention policy action Retention policy actions are available only in data rules. A retention policy action determines how long the data is considered to still be valid. The retention policy status of all your data can be viewed in ViziVault Enterprise. Retention policies can specify either a cutoff date after which the data is no longer valid, or a number of days to retain the data for. Additionally, a secondary policy can be specified that marks data as invalid if it has not been read for a certain number of days. By default, expired data will remain into the system until it is manually deleted, but data can also be set to automatically delete when it expires. JSON format of actions Regulation metadata action type : the string \"regulation\" regulation : a regulation key (string) Tag metadata action type : the string \"tag\" tag : a tag (string) status : a boolean; true to add or false to remove. Only present in activity rules. Entity tag action type : the string \"entityTag\" tag : a tag (string) status : a boolean; true to add or false to remove. Storage prevention action type : the string \"block\" message : a human-readable explantion of why the storage was disallowed Notification action type : the string \"alert\" alertLevel : one of INFO , WARNING , DANGER , SUCCESS , or NEUTRAL message : the text to display in the notification Prohibition action type : the string \"prohibition\" status : a boolean; true to add or false to remove. prohibitions : a list of strings indicating what actions should be prohibited; possible values are READ , STORE , UPDATE , and DELETE . Retention policy action type : the string \"retention\" expirationDate : an ISO-formatted date string indicating when this data expires (optional; mutually exclusive with daysSinceStore ) daysSinceStore : an integer indicating how many days to retain this data for (optional; mutually exclusive with daysSinceStore ) daysSinceRead : an integer indicating that the data will become invalid if it has not been read during this many days (optional) autoDelete : a boolean value; if true, the system will automatically delete this data when it expires Execution order Because rules can modify tags and regulations but can also depend on tags and regulations, it may be necessary to specify an order in which they are executed. Because of this, rules can optionally have an execution order specified. Rules that have the same type of action will be executed in order from lowest to highest specified order. When two or more rules have the same execution order, there is no guarantee what order they will be executed in, although it will usually default to the order they were created. For this reason, it is recommended that if one rule modifies a tag or regulation that another rule depends on, the two rules should have different execution orders. Some rules by their nature cannot affect further rules. For this reason, rules are executed as follows: first, all rules that add tags in order, then all rules that add regulations in order, then all rules that send notifications, then all rules that block storage.","title":"Rules"},{"location":"tutorials/rules/#rules","text":"ViziVault contains a flexible and powerful rules engine that can automate tasks on incoming data. When data is stored in your system, you can configure rules that will check the data against configurable constraints and perform various actions based on which predicates match. This can add metadata taggings such as marking the data with what regulations govern its use (such as GDPR or HIPAA), send notifications to you, or prevent the data from being stored entirely. There are four parts to every rule: a name, a constraint that determines when the rule should be active, an action to take when the rule is active, and optionally an execution order that specifies when this rule should be run relative to other rules. Rules can operate on either data or activity ; the constraints and actions available for activity rules differ from those available for data rules.","title":"Rules"},{"location":"tutorials/rules/#constraints","text":"","title":"Constraints"},{"location":"tutorials/rules/#attribute-list-constraints","text":"Attribute constraints are applicable to both data rules and activity rules. The simplest constraint is an attribute list constraint, which can mark a rule as applying to either all attributes in a specified list, or all attributes that are not in that specified list. The attribute list constraint consists of a list of attribute keys, and an operator, which is either any (which will match data whose attribute is in the list) or none (which will match data whose attribute is not in the list).","title":"Attribute list constraints"},{"location":"tutorials/rules/#geographic-constraints","text":"Geographic constraints are applicable to both data rules and activity rules. Geographic constraints match incoming data based on the data's geographic location. Note that geolocation data is based on the IP address of the HTTP request storing the data; if there are proxy servers involved, this constraint may not always be fully accurate. A geographic constraint consists of an operator (either any or none ), a list of countries, and a list of subdivisions. Countries are represented using ISO 3166-1 two-letter codes, and subdivisions are represented using ISO 3166-2 hyphenated codes.","title":"Geographic constraints"},{"location":"tutorials/rules/#tag-list-constraints","text":"Tag constraints are applicable only to data rules. Tag list constraints are similar to attribute list constraints, in that they consist of a list of tags and an operator. However, since a data point can have multiple tags (but not belong to multiple attributes), the operator all is also allowed; in this case, the constraint would only match data points whose attribute is tagged with all of the tags in the provided list.","title":"Tag list constraints"},{"location":"tutorials/rules/#regulation-list-constraints","text":"Regulation constraints are applicable only to data rules. Regulation constraints are much the same as attribute list constraints and tag list constraints, consisting of an operator which is any or all or none and a list of regulations.","title":"Regulation list constraints"},{"location":"tutorials/rules/#entity-type-constraints","text":"Entity type constraints are applicable only to data rules. Entity type constraints consist of a list of entity type keys and will match incoming data belonging to an entity of one of the specified types.","title":"Entity type constraints"},{"location":"tutorials/rules/#value-constraints","text":"Value constraints are applicable only to data rules. Value constraints allow you to activate rules based on various properties of the value of an attribute. A value constraint consists of three parts: the attribute to consider, the value to compare the value of the attribute to, and the precise way the attribute values should be compared (referred to as the predicate). Value constraints can be combined with entity tag actions to allow tags to be added based off of the values of the entity's other attributes. The valid predicates are as follows: eq : Matches entities whose value of this attribute is exactly equal to the provided value. neq : Matches entities whose value of this attribute is anything other than the provided value. gt : For numerical data; matches entities whose value of this attribute is greater than the provided value. lt : For numerical data; matches entities whose value of this attribute is less than the provided value. geq : For numerical data; matches entities whose value of this attribute is greater than or equal to the provided value. leq : For numerical data; matches entities whose value of this attribute is less than or equal to the provided value. after : For temporal data; matches entities whose value of this attribute is a later time than the provided value. before : For temporal data; matches entities whose value of this attribute is an earlier time than the provided value. in : Treats the value as a comma-delimited list of strings and matches entities whose value of this attribute appears in the provided list. nin : Treats the value as a comma-delimited list of strings and matches entities whose value of this attribute does not appear in the provided list. regex : Treats the value as a regular expression and matches entities whose value of this attribute is a string that matches the provided regular expression.","title":"Value constraints"},{"location":"tutorials/rules/#sentiment-constraints","text":"Sentiment constraints are applicable only to data rules. For data whose value is natural-language text, the sentiment constraint uses IBM's Watson system to perform sentiment analysis on the data value. Watson detects the overall sentiment of text, as well as the sentiment that the text expresses towards specific topics. This constraint will match data if the overall detected sentiment is more extreme than the threshold (that is, greater than a positive threshold, or less than a negative one), or if sentiment exceeding the threshold is detected towards any keywords.","title":"Sentiment constraints"},{"location":"tutorials/rules/#application-constraints","text":"Application constraints are applicable only to activity rules. Application constraints are similar to attribute constraints, containing a list of application ids and an operator that is either \"any\" or \"none\". This will match activity events whose specified application ID is either included or excluded in the list.","title":"Application constraints"},{"location":"tutorials/rules/#event-type-constraints","text":"Event type constraints are applicable only to activity rules. An event type constraint consists of some subset of the strings \"STORE\", \"UPDATE\", \"READ\", and \"DELETE\", and will match activity events whose event type is contained in that subset.","title":"Event type constraints"},{"location":"tutorials/rules/#conjunctive-all-constraints","text":"Conjunctive constraints are applicable to any rule type. Conjunctive constraints allow you to further constrain what data is matched. They consist of a list of other constraints, and will match data that is matched by all of the constituent constraints.","title":"Conjunctive (\"all\") constraints"},{"location":"tutorials/rules/#disjunctive-any-constraints","text":"Disjunctive constraints are applicable to any rule type. Disjunctive constraints allow you to broaden what data is matched. They consist of a list of other constraints, and will match data that is matched by any of the constituent constraints.","title":"Disjunctive (\"any\") constraints"},{"location":"tutorials/rules/#json-format-of-constraints","text":"Constraints are expressed as a JSON object, structured as described below. The value of the rule's type field determines the rest of its structure. Conjunctive constraint type : the string \"all\" constraints : a list of rule objects Disjunctive constraint type : the string \"any\" constraints : a list of rule objects Attribute constraint type : the string \"attribute\" operator : either any or none attributes : list of attribute keys (strings) Geographic constraint type : the string \"geo\" operator : either any or none countries : list of ISO 3166-1 country codes, as strings subdivisions : list of ISO 3166-2 country subdivision codes, as strings Tag constraint type : the string \"tag\" operator : either any , all , or none tags : list of tag names (strings) Regulation constraint type : the string \"regulation\" operator : either any , all , or none regulations : List of regulation keys (strings) Entity-attribute-value constraint type : the string \"user\" attribute : attribute key (string) predicate : one of eq , neq , gt , lt , geq , leq , before , after , in , nin , value : When predicate is eq or neq , any number or string. When predicate is gt , lt , geq , or leq , any number. When predicate is before or after , a string representing a point in time. When predicate is in or nin , a string consisting of values separated by commas. When predicate is regex , a valid regular expression. Sentiment constraint type : the string sentiment threshold : a floating-point number between -1 and 1 Application constraint type : the string application operator : either any or none applications : list of application ids (strings) Event type constraint type : the string eventType eventTypes : list of strings taken from among \"STORE\" , \"UPDATE\" , \"READ\" , and \"DELETE\"","title":"JSON format of constraints"},{"location":"tutorials/rules/#actions","text":"","title":"Actions"},{"location":"tutorials/rules/#notification-action","text":"Notification actions are available in any rule type. A notification action dispatches a notification to the ViziVault enterprise web interface. The text of the notification and its alert level can be configured.","title":"Notification action"},{"location":"tutorials/rules/#tag-metadata-action","text":"Tag actions are available in both data and activity rules. A tag metadata action applies a tag to data. This can be used for various business logic, for analytics in the ViziVault Enterprise frontend, and to trigger other rules. Activity rules can also be configured to remove tags.","title":"Tag metadata action"},{"location":"tutorials/rules/#prohibition-action","text":"Prohibition actions are available in both data and activity rules. A prohibition action marks the relevant entity, stating that certain actions should be disallowed on that entity's data. A prohibition action can also be used to remove an existing prohibition from an entity. Reading data, storing new data, overwriting existing data, and deleting data can all be prohibited. For example, to mark that an entity is under a legal hold and therefore actions that could result in data being lost should be disallowed, overwriting and deleting data should be prohibited, while reading and storing can continue unimpeded. Likewise, a privacy regulation could indicate that a data subject wants their data to not be accessed, which would necessitate disallowing reads.","title":"Prohibition action"},{"location":"tutorials/rules/#entity-tag-action","text":"Entity tag actions are available in both data and activity rules. An entity tag action adds or removes a tag on the entity that a data point being accessed belongs to. This will cause the tag to be added to all future data stored about that entity.","title":"Entity tag action"},{"location":"tutorials/rules/#regulation-metadata-action","text":"Regulation metadata actions are avaiable only in data rules. A regulation metadata action adds a regulation to data in the same way a tag metadata action adds a tag. Like a tag metadata action, this can be used for internal business logic or to trigger other rules.","title":"Regulation metadata action"},{"location":"tutorials/rules/#storage-prevention-action","text":"Storage prevention actions are available only in data rules. A storage prevention action causes the system to reject data, preventing it from being stored in the system. This is often useful for regulatory compliance. This allows configuring a custom message to display to clients when their data is rejected.","title":"Storage prevention action"},{"location":"tutorials/rules/#retention-policy-action","text":"Retention policy actions are available only in data rules. A retention policy action determines how long the data is considered to still be valid. The retention policy status of all your data can be viewed in ViziVault Enterprise. Retention policies can specify either a cutoff date after which the data is no longer valid, or a number of days to retain the data for. Additionally, a secondary policy can be specified that marks data as invalid if it has not been read for a certain number of days. By default, expired data will remain into the system until it is manually deleted, but data can also be set to automatically delete when it expires.","title":"Retention policy action"},{"location":"tutorials/rules/#json-format-of-actions","text":"Regulation metadata action type : the string \"regulation\" regulation : a regulation key (string) Tag metadata action type : the string \"tag\" tag : a tag (string) status : a boolean; true to add or false to remove. Only present in activity rules. Entity tag action type : the string \"entityTag\" tag : a tag (string) status : a boolean; true to add or false to remove. Storage prevention action type : the string \"block\" message : a human-readable explantion of why the storage was disallowed Notification action type : the string \"alert\" alertLevel : one of INFO , WARNING , DANGER , SUCCESS , or NEUTRAL message : the text to display in the notification Prohibition action type : the string \"prohibition\" status : a boolean; true to add or false to remove. prohibitions : a list of strings indicating what actions should be prohibited; possible values are READ , STORE , UPDATE , and DELETE . Retention policy action type : the string \"retention\" expirationDate : an ISO-formatted date string indicating when this data expires (optional; mutually exclusive with daysSinceStore ) daysSinceStore : an integer indicating how many days to retain this data for (optional; mutually exclusive with daysSinceStore ) daysSinceRead : an integer indicating that the data will become invalid if it has not been read during this many days (optional) autoDelete : a boolean value; if true, the system will automatically delete this data when it expires","title":"JSON format of actions"},{"location":"tutorials/rules/#execution-order","text":"Because rules can modify tags and regulations but can also depend on tags and regulations, it may be necessary to specify an order in which they are executed. Because of this, rules can optionally have an execution order specified. Rules that have the same type of action will be executed in order from lowest to highest specified order. When two or more rules have the same execution order, there is no guarantee what order they will be executed in, although it will usually default to the order they were created. For this reason, it is recommended that if one rule modifies a tag or regulation that another rule depends on, the two rules should have different execution orders. Some rules by their nature cannot affect further rules. For this reason, rules are executed as follows: first, all rules that add tags in order, then all rules that add regulations in order, then all rules that send notifications, then all rules that block storage.","title":"Execution order"},{"location":"tutorials/search/","text":"Search Overview In order to allow users of the ViziVault system to search on data without opening up the possibility of data breaches, ViziVault supports blind indexing for selected attributes. What this means is that, whenever a datapoint is stored that belongs to an indexable attribute, a secure hash is calculated for the datapoint value. When a user wants to search for a data value in the vault, the value they enter is hashed in the same way, and compared against the stored hash of data that is in the vault. In this way, it is possible to identify whether one specific value exists in the vault, without leaking any information about what else is in the vault. Of course, this behavior is not desirable for all attributes, which is why it is possible to specify at the attribute level what data should be indexed. This allows analytics such as \"what is the ratio of male to female customers\" to be calculated, while making it impossible to search for a data subject by their social security number; in order to do this, all that is necessary is for gender to be an indexed attribute but not social security number. If an indexed attribute contains structured data by means of an attribute schema, each sub-attribute is indexed separately, allowing greater flexibility in how search can be used. Performing a search using the ViziVault API To perform a search request using the ViziVault API, send a HTTP POST request to /data/search . The body of the request should be a JSON object formatted as follows: { \"page\" : <i nte ger> , \"count\" : <i nte ger> , \"query\" : { \"values\" : [ { \"attribute\" : <a ttr ibu te key> , \"value\" : <s tr i n g> } ], \"attributes\" : [ <s tr i n g> ], \"regulations\" : [ <s tr i n g> ], \"sensitivity\" : <o ne o f \"SENSITIVE\" , \"PERSONAL\" , \"CONFIDENTIAL\" , or \"NORMAL\" > , \"subjectId\" : [ <s tr i n g> ], \"country\" : <s tr i n g> , \"minCreatedDate\" : <da te > , \"maxCreatedDate\" : <da te > } } This query will return all data points in the vault that either belong to an attribute listed in attributes , or match an attribute-value pair as specified in values . The rest of the parameters can be used to further filter what data is returned, and the page and count parameters are used for pagination. values , page , and count are mandatory. All other parameters are optional. More details for each parameter are as follows: values : This is a list of attribute-value pairs. This will match any datapoint in the vault that belongs to the specified attribute and has the specified value, so long as the attribute in question is indexable. If a non-indexable attribute is specified here, that attribute-value pair will be ignored. attributes : This is a list of attributes. This will match any datapoint in the vault that belongs to a specified attribute, regardless of whether it is indexable. regulations : This is a list of regulations. It will filter the search results to only include data points tagged with one or more of the regulations specified. Including an empty string in this list will match data points that are not tagged with any regulations. subjectId : This is a list of IDs of data subjects in the vault. It will filter the search results to only include data points belonging to those data subjects. country : This is an ISO 3166 country code, such as \"US\" or \"GB\". It will filter the search results to only include data points collected from that country. minCreatedDate , maxCreatedDate : These are timestamps formatted according to ISO 8601. They will filter data points based on when those data points were entered into the system. Examples To list all data subjects whose job title is \"Software Engineer\": { \"page\" : 0 , \"count\" : 100 , \"query\" : { \"values\" : [ { \"attribute\" : \"JOB_TITLE\" , \"value\" : \"Software Engineer\" } ] } }","title":"Search"},{"location":"tutorials/search/#search","text":"","title":"Search"},{"location":"tutorials/search/#overview","text":"In order to allow users of the ViziVault system to search on data without opening up the possibility of data breaches, ViziVault supports blind indexing for selected attributes. What this means is that, whenever a datapoint is stored that belongs to an indexable attribute, a secure hash is calculated for the datapoint value. When a user wants to search for a data value in the vault, the value they enter is hashed in the same way, and compared against the stored hash of data that is in the vault. In this way, it is possible to identify whether one specific value exists in the vault, without leaking any information about what else is in the vault. Of course, this behavior is not desirable for all attributes, which is why it is possible to specify at the attribute level what data should be indexed. This allows analytics such as \"what is the ratio of male to female customers\" to be calculated, while making it impossible to search for a data subject by their social security number; in order to do this, all that is necessary is for gender to be an indexed attribute but not social security number. If an indexed attribute contains structured data by means of an attribute schema, each sub-attribute is indexed separately, allowing greater flexibility in how search can be used.","title":"Overview"},{"location":"tutorials/search/#performing-a-search-using-the-vizivault-api","text":"To perform a search request using the ViziVault API, send a HTTP POST request to /data/search . The body of the request should be a JSON object formatted as follows: { \"page\" : <i nte ger> , \"count\" : <i nte ger> , \"query\" : { \"values\" : [ { \"attribute\" : <a ttr ibu te key> , \"value\" : <s tr i n g> } ], \"attributes\" : [ <s tr i n g> ], \"regulations\" : [ <s tr i n g> ], \"sensitivity\" : <o ne o f \"SENSITIVE\" , \"PERSONAL\" , \"CONFIDENTIAL\" , or \"NORMAL\" > , \"subjectId\" : [ <s tr i n g> ], \"country\" : <s tr i n g> , \"minCreatedDate\" : <da te > , \"maxCreatedDate\" : <da te > } } This query will return all data points in the vault that either belong to an attribute listed in attributes , or match an attribute-value pair as specified in values . The rest of the parameters can be used to further filter what data is returned, and the page and count parameters are used for pagination. values , page , and count are mandatory. All other parameters are optional. More details for each parameter are as follows: values : This is a list of attribute-value pairs. This will match any datapoint in the vault that belongs to the specified attribute and has the specified value, so long as the attribute in question is indexable. If a non-indexable attribute is specified here, that attribute-value pair will be ignored. attributes : This is a list of attributes. This will match any datapoint in the vault that belongs to a specified attribute, regardless of whether it is indexable. regulations : This is a list of regulations. It will filter the search results to only include data points tagged with one or more of the regulations specified. Including an empty string in this list will match data points that are not tagged with any regulations. subjectId : This is a list of IDs of data subjects in the vault. It will filter the search results to only include data points belonging to those data subjects. country : This is an ISO 3166 country code, such as \"US\" or \"GB\". It will filter the search results to only include data points collected from that country. minCreatedDate , maxCreatedDate : These are timestamps formatted according to ISO 8601. They will filter data points based on when those data points were entered into the system.","title":"Performing a search using the ViziVault API"},{"location":"tutorials/search/#examples","text":"To list all data subjects whose job title is \"Software Engineer\": { \"page\" : 0 , \"count\" : 100 , \"query\" : { \"values\" : [ { \"attribute\" : \"JOB_TITLE\" , \"value\" : \"Software Engineer\" } ] } }","title":"Examples"},{"location":"vizivault-enterprise/applications/","text":"Applications Name and Description : The unique name of the application that will access data from the vault and a description of the application's purpose. Key : The public encryption key associated with the application Attributes, Last Updated, Support Email Attributes: The attributes that the application has permission to read, write, and delete data for. Last Updated: The timestamp of when the application was most recently modified Support Email: A contact email for the person responsible for this application. Actions : Edit the properties of an application Delete the application Create and Export Add a new application Export information on existing applications","title":"Applications"},{"location":"vizivault-enterprise/applications/#applications","text":"Name and Description : The unique name of the application that will access data from the vault and a description of the application's purpose. Key : The public encryption key associated with the application Attributes, Last Updated, Support Email Attributes: The attributes that the application has permission to read, write, and delete data for. Last Updated: The timestamp of when the application was most recently modified Support Email: A contact email for the person responsible for this application. Actions : Edit the properties of an application Delete the application Create and Export Add a new application Export information on existing applications","title":"Applications"},{"location":"vizivault-enterprise/attributes/","text":"Attributes Name : The user-friendly non-unique attribute identifier. Tags : A list of tags that will be automatically added to all values of this attribute. Indexed : Indicates whether data associated with this attribute is indexed for searching. Sample Data : Example data demonstrating the format of the attribute. Sensitivity : Level of informational security risk or privacy consideration Regulations : List of regulations that are considered to apply to the attribute. Application : The applications that can access values of this attribute. Actions : View the schema of an attribute. Edit the properties of an attribute. Delete the attribute. Create and Export : Add a new attribute ot export the existing attributes. Add a new attribute. Export information on existing attributes.","title":"Attributes"},{"location":"vizivault-enterprise/attributes/#attributes","text":"Name : The user-friendly non-unique attribute identifier. Tags : A list of tags that will be automatically added to all values of this attribute. Indexed : Indicates whether data associated with this attribute is indexed for searching. Sample Data : Example data demonstrating the format of the attribute. Sensitivity : Level of informational security risk or privacy consideration Regulations : List of regulations that are considered to apply to the attribute. Application : The applications that can access values of this attribute. Actions : View the schema of an attribute. Edit the properties of an attribute. Delete the attribute. Create and Export : Add a new attribute ot export the existing attributes. Add a new attribute. Export information on existing attributes.","title":"Attributes"},{"location":"vizivault-enterprise/dashboard/","text":"Dashboard Alerts and notifications indicating events that have happened recently in the system. Status of scheduled reports. Comparison of data that is secured in the vault versus data that the vault is reporting on, broken down by regulations. Statistics on what attributes are stored in the vault Breakdown of your private data access activity geographically over variable time periods. Number of users represented in the system's data over a variable time period. Volume of activity on the system by variable time periods Data points on the system broken down by applications that use them. Breakdown of data in the system by sensitivity rating (Personal/Normal/Confidential/Sensitive)","title":"Dashboard"},{"location":"vizivault-enterprise/dashboard/#dashboard","text":"Alerts and notifications indicating events that have happened recently in the system. Status of scheduled reports. Comparison of data that is secured in the vault versus data that the vault is reporting on, broken down by regulations. Statistics on what attributes are stored in the vault Breakdown of your private data access activity geographically over variable time periods. Number of users represented in the system's data over a variable time period. Volume of activity on the system by variable time periods Data points on the system broken down by applications that use them. Breakdown of data in the system by sensitivity rating (Personal/Normal/Confidential/Sensitive)","title":"Dashboard"},{"location":"vizivault-enterprise/data-sharing/","text":"Data Sharing Recipient : The receiver of personal information from your organization. Business Justification : The business need or requirement that this sharing operation fulfills. Attributes : The attributes contained in the sharing export. Date Created/Date Modified : The time this sharing schedule was created and the last time it was modified. Frequency : The schedule by which data is shared (Hourly, Daily, Weekly, Monthly, Quarterly, Annual, and On Demand). Delivery Method : How the data sharing export file will be delivered (API, EDI, Email, Secure File Download). Last Sent : The last time this data export was sent. Create and Export Add a new Data Sharing Schedule. Export information on existing sharing schedules. Actions : Edit the properties of a Sharing Schedule. View Shared Data. Manually Send the Data Export.","title":"Data Sharing"},{"location":"vizivault-enterprise/data-sharing/#data-sharing","text":"Recipient : The receiver of personal information from your organization. Business Justification : The business need or requirement that this sharing operation fulfills. Attributes : The attributes contained in the sharing export. Date Created/Date Modified : The time this sharing schedule was created and the last time it was modified. Frequency : The schedule by which data is shared (Hourly, Daily, Weekly, Monthly, Quarterly, Annual, and On Demand). Delivery Method : How the data sharing export file will be delivered (API, EDI, Email, Secure File Download). Last Sent : The last time this data export was sent. Create and Export Add a new Data Sharing Schedule. Export information on existing sharing schedules. Actions : Edit the properties of a Sharing Schedule. View Shared Data. Manually Send the Data Export.","title":"Data Sharing"},{"location":"vizivault-enterprise/discover/","text":"Discover The Discover page lets you browse the information and activities happening in your vault dynamically. This allows you to drill in on relevant subsets of information. User counts segmented by time and/or region Aggregate datapoint count split up by attribute. Examine totals by time, region, and overall breakdown. Aggregate datapoint counts split up by data accessibility. Examine totals by time, region, and overall breakdown. Aggregate datapoint counts split up by regulation. Examine totals by time, region, and overall breakdown. Aggregate activity counts split up by application origin. Examine totals by time, region, and overall breakdown. The chart generated by choosing a chart time window and segmentation above. The dataset generated by choosing a chart time window and segmentation above.","title":"Discover"},{"location":"vizivault-enterprise/discover/#discover","text":"The Discover page lets you browse the information and activities happening in your vault dynamically. This allows you to drill in on relevant subsets of information. User counts segmented by time and/or region Aggregate datapoint count split up by attribute. Examine totals by time, region, and overall breakdown. Aggregate datapoint counts split up by data accessibility. Examine totals by time, region, and overall breakdown. Aggregate datapoint counts split up by regulation. Examine totals by time, region, and overall breakdown. Aggregate activity counts split up by application origin. Examine totals by time, region, and overall breakdown. The chart generated by choosing a chart time window and segmentation above. The dataset generated by choosing a chart time window and segmentation above.","title":"Discover"},{"location":"vizivault-enterprise/overview/","text":"Overview Vizivault Enterprise allows organizations to visualize, manage, and share personal information. Visualization Vizivault Enterprise gives your organization a window into the personal information you already have, how it is being used, and what risks are associated with it. It shows you what personal information you have shared within and external to your organization. You can show the quantity of information that is not properly secured. Dashboard gives you an overview of the security of your information with a focus on immediate security concerns and overall information health. Discover allows you to examine your data more closely, viewing trends over time, geographical distribution by country, and other statistics. Reports creates custom reports tailored to your organization's needs, which will alert you to anomalous usage of your stored data. Management Vizivault Enterprise can also let you control and manage your organization's personal information. You can define attributes to specify what kinds of data you store, and regulations that control how data is used. Tags Create tags that can mark and categorize attributes, data subjects, or individual points of data. Attributes Create the fundamental data types that your organization needs to store and define how they are handled. Regulations Create rules to manage personal information across your organization. Applications Define which programs have access to which attributes.","title":"Overview"},{"location":"vizivault-enterprise/overview/#overview","text":"Vizivault Enterprise allows organizations to visualize, manage, and share personal information.","title":"Overview"},{"location":"vizivault-enterprise/overview/#visualization","text":"Vizivault Enterprise gives your organization a window into the personal information you already have, how it is being used, and what risks are associated with it. It shows you what personal information you have shared within and external to your organization. You can show the quantity of information that is not properly secured. Dashboard gives you an overview of the security of your information with a focus on immediate security concerns and overall information health. Discover allows you to examine your data more closely, viewing trends over time, geographical distribution by country, and other statistics. Reports creates custom reports tailored to your organization's needs, which will alert you to anomalous usage of your stored data.","title":"Visualization"},{"location":"vizivault-enterprise/overview/#management","text":"Vizivault Enterprise can also let you control and manage your organization's personal information. You can define attributes to specify what kinds of data you store, and regulations that control how data is used. Tags Create tags that can mark and categorize attributes, data subjects, or individual points of data. Attributes Create the fundamental data types that your organization needs to store and define how they are handled. Regulations Create rules to manage personal information across your organization. Applications Define which programs have access to which attributes.","title":"Management"},{"location":"vizivault-enterprise/regulations/","text":"Regulations Acronym : Unique short abbreviation of full regulation name. Name : Full name of the regulation, standard, or procedure. Rules : Custom rule structure for the regulation. Created Date : The date when the regulation was first introduced. Last Modified : The date when the regulation was last changed. Actions : Edit the properties of a regulation Delete the regulation. Creation and Export : Add a new attribute ot export the existing attributes. Add a new regulation Export information on existing regulations","title":"Regulations"},{"location":"vizivault-enterprise/regulations/#regulations","text":"Acronym : Unique short abbreviation of full regulation name. Name : Full name of the regulation, standard, or procedure. Rules : Custom rule structure for the regulation. Created Date : The date when the regulation was first introduced. Last Modified : The date when the regulation was last changed. Actions : Edit the properties of a regulation Delete the regulation. Creation and Export : Add a new attribute ot export the existing attributes. Add a new regulation Export information on existing regulations","title":"Regulations"},{"location":"vizivault-enterprise/reports/","text":"Reports Name : The unique identifier of the report. Report Type : The statistic that the report measures (percent change in users, percent change in activity volume, or total activity volume). Frequency : How frequently the report is run. Severity : The level of severity of the Alert (Info/Neutral/Success/Warning/Danger) Minimum : The minimum percentage or absolute number to trigger the alert Maximum : The maximum percentage or absolute number to trigger the alert. Parameters : Additional options for narrowing down the scope of the report; for example, activity volume reports allow specifying an application, attribute, and/or an event type. Create and Export ![Add](../assets/images/add.png \"Add\") Add a new Report ![create_report](../assets/images/create_report.png \"Create Report\") ![export](../assets/images/export.png \"Export\") Export information on existing tags Actions : Actions that you can take on a report. Edit the properties of a report : Delete the report :","title":"Reports"},{"location":"vizivault-enterprise/reports/#reports","text":"Name : The unique identifier of the report. Report Type : The statistic that the report measures (percent change in users, percent change in activity volume, or total activity volume). Frequency : How frequently the report is run. Severity : The level of severity of the Alert (Info/Neutral/Success/Warning/Danger) Minimum : The minimum percentage or absolute number to trigger the alert Maximum : The maximum percentage or absolute number to trigger the alert. Parameters : Additional options for narrowing down the scope of the report; for example, activity volume reports allow specifying an application, attribute, and/or an event type.","title":"Reports"},{"location":"vizivault-enterprise/reports/#create-and-export","text":"![Add](../assets/images/add.png \"Add\") Add a new Report ![create_report](../assets/images/create_report.png \"Create Report\") ![export](../assets/images/export.png \"Export\") Export information on existing tags Actions : Actions that you can take on a report. Edit the properties of a report : Delete the report :","title":"Create and Export"},{"location":"vizivault-enterprise/tags/","text":"Tags Name : The user-friendly non-unique attribute identifier. Number of attributes : The number of attributes tagged with this tag. Created Date : Date when the tag was created. Last Updated : Date when the tag was last updated. Actions : Actions that you can take on an attribute. Edit the properties of a tag. Delete the tag. Create and Export : Add a new attribute ot export the existing attributes. Add a new tag. Export information on existing tags.","title":"Tags"},{"location":"vizivault-enterprise/tags/#tags","text":"Name : The user-friendly non-unique attribute identifier. Number of attributes : The number of attributes tagged with this tag. Created Date : Date when the tag was created. Last Updated : Date when the tag was last updated. Actions : Actions that you can take on an attribute. Edit the properties of a tag. Delete the tag. Create and Export : Add a new attribute ot export the existing attributes. Add a new tag. Export information on existing tags.","title":"Tags"},{"location":"vizivault-enterprise/vaults/","text":"Vaults Name : The unique identifier of the vault. Records : Total number of records stored in the vault. Status : The current server status. Options are online, offline, and maintenance. Locations : The cloud based server vault locations. Regulations : Regulations that apply to the vault and all of its stored data. Applications : Applications that have access rights to the vault. Attributes : The attribute data types that reside on the vault. Actions : Actions that you can take on a vault. View the properties of a vault. Disable or Decomission the Vault. Export : Export information about all available vaults.","title":"Vaults"},{"location":"vizivault-enterprise/vaults/#vaults","text":"Name : The unique identifier of the vault. Records : Total number of records stored in the vault. Status : The current server status. Options are online, offline, and maintenance. Locations : The cloud based server vault locations. Regulations : Regulations that apply to the vault and all of its stored data. Applications : Applications that have access rights to the vault. Attributes : The attribute data types that reside on the vault. Actions : Actions that you can take on a vault. View the properties of a vault. Disable or Decomission the Vault. Export : Export information about all available vaults.","title":"Vaults"}]}